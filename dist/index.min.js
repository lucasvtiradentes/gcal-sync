!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,i,o){return new(i||(i=Promise))((function(s,n){function r(e){try{c(o.next(e))}catch(e){n(e)}}function a(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((o=o.apply(e,t||[])).next())}))}function t(e){const t=PropertiesService.getScriptProperties().getProperty(e);let i;try{i=JSON.parse(t)}catch(e){i=t}return i}function i(e,t){const i="string"==typeof t?t:JSON.stringify(t);PropertiesService.getScriptProperties().setProperty(e,i)}function o(e){const t=ScriptApp.getProjectTriggers().find((t=>t.getHandlerFunction()===e));t&&ScriptApp.deleteTrigger(t)}"function"==typeof SuppressedError&&SuppressedError;const s={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500,REQUIRED_GITHUB_VALIDATIONS_COUNT:3,EVENTS_DIVIDER:" | "},n={todayTicktickAddedTasks:{key:"todayTicktickAddedTasks",schema:{}},todayTicktickUpdateTasks:{key:"todayTicktickUpdateTasks",schema:{}},todayTicktickCompletedTasks:{key:"todayTicktickCompletedTasks",schema:{}},todayGithubAddedCommits:{key:"todayGithubAddedCommits",schema:{}},todayGithubDeletedCommits:{key:"todayGithubDeletedCommits",schema:{}},lastReleasedVersionAlerted:{key:"lastReleasedVersionAlerted",schema:{}},lastDailyEmailSentDate:{key:"lastDailyEmailSentDate",schema:{}},githubLastAddedCommits:{key:"githubLastAddedCommits",schema:{}},githubLastDeletedCommits:{key:"githubLastDeletedCommits",schema:{}},githubCommitChangesCount:{key:"githubCommitChangesCount",schema:{}}},r={info:(e,...t)=>{console.log(e,...t)},error:(e,...t)=>{console.error(e,...t)}},a=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},c=e=>a().find((t=>t.summary===e)),d=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const i=t.newCalendar();i.summary=e,i.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(i)};function m(e){return e.reduce(((e,t)=>{var i;const o=function(e){return Calendar.Events.list(e.id,{maxResults:s.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,i,o,s,n;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(i=e.attendees)&&void 0!==i?i:[],reminders:null!==(o=e.reminders)&&void 0!==o?o:{},visibility:null!==(s=e.visibility)&&void 0!==s?s:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(n=e.extendedProperties)&&void 0!==n?n:{}}}(e)))}((i=t,a().find((e=>e.summary===i))));return[...e,...o]}),[])}const l="gcal-sync",u="2.0.0",p="lucasvtiradentes/gcal-sync",h="ticktick_sync",g="github_sync",y={productionOnly:"This method cannot run in non-production environments",incorrectIcsCalendar:"The link you provided is not a valid ICS calendar: ",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: ",invalidGithubToken:"You provided an invalid github token",invalidGithubUsername:"You provided an invalid github username",abusiveGoogleCalendarApiUse:"Due to the numerous operations in the last few hours, the google api is not responding."};function f(t,i){var o;return e(this,void 0,void 0,(function*(){const e=[];let s=1,n=!1;for(;!1===n;){const r=`https://api.github.com/search/commits?q=author:${t}&page=${s}&sort=committer-date&per_page=100`;let a;a=""!==i?UrlFetchApp.fetch(r,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${i}`}}):UrlFetchApp.fetch(r,{muteHttpExceptions:!0});const c=null!==(o=JSON.parse(a.getContentText()))&&void 0!==o?o:{};if(200!==a.getResponseCode()){if("Validation Failed"===c.message)throw new Error(y.invalidGithubUsername);if("Bad credentials"===c.message)throw new Error(y.invalidGithubToken);throw new Error(c.message)}const d=c.items;if(0===d.length){n=!0;break}if(e.push(...d),s++,s>10){n=!0;break}}return e.map((e=>({commitDate:e.commit.author.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}function _(e){const t={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=e;for(const[e,o]of Object.entries(t))i=i.replace(e,o);return i}function k(e){return"object"==typeof e&&null!==e}function v(e,t){if(!k(e))return!1;for(const i in t){if(!(i in e))return r.error(`Missing key: ${i}`),!1;const o=typeof t[i],s=typeof e[i];if(k(t[i])){if(!k(e[i])||!v(e[i],t[i]))return r.error(`Invalid nested structure or type mismatch at key: ${i}`),!1}else if(o!==s)return r.error(`Type mismatch at key: ${i}. Expected ${o}, found ${s}`),!1}return!0}function b(e,t){return v(e,t)}const T={settings:{sync_function:"",timezone_correction:-3,update_frequency:4},options:{daily_summary_email_time:"15:00",email_daily_summary:!1,email_errors:!1,email_new_gcal_sync_release:!1,email_session:!1,maintenance_mode:!1,show_logs:!1}},w={ics_calendars:[]},C={username:"",commits_configs:{commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},issues_configs:{issues_calendar:""},personal_token:""};return class{constructor(e){if(this.configs=e,!function(e){if(!k(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=b(e,T),h in e&&(t.ticktick=b(e[h],w)),g in e&&(t.github=b(e[g],C)),Object.values(t).every((e=>!0===e))}(e))throw new Error("schema invalid");this.is_gas_environment="undefined"!=typeof Calendar,this.today_date=function(e){const t=new Date;return t.setHours(t.getHours()+e),t}(this.configs.settings.timezone_correction).toISOString().split("T")[0],r.info(`${l} is running at version ${u}!`)}parseGcalVersion(e){return Number(e.replace("v","").split(".").join(""))}getLatestGcalSyncRelease(){var e;const t=UrlFetchApp.fetch(`https://api.github.com/repos/${p}/releases?per_page=1`),i=null!==(e=JSON.parse(t.getContentText())[0])&&void 0!==e?e:{};if(0!==Object.keys(i).length)return i}install(){return e(this,void 0,void 0,(function*(){var e,t;o(this.configs.settings.sync_function),e=this.configs.settings.sync_function,t=this.configs.settings.update_frequency,ScriptApp.newTrigger(e).timeBased().everyMinutes(t).create(),Object.keys(n).forEach((e=>{PropertiesService.getScriptProperties().getProperties().includes(e)||i(n[e].key,"")})),r.info(`${l} was set to run function "${this.configs.settings.sync_function}" every ${this.configs.settings.update_frequency} minutes`)}))}uninstall(){return e(this,void 0,void 0,(function*(){o(this.configs.settings.sync_function),Object.keys(n).forEach((e=>{var t;t=n[e].key,PropertiesService.getScriptProperties().deleteProperty(t)})),r.info(`${l} automation was removed from appscript!`)}))}clearTodayEvents(){i(n.todayGithubAddedCommits.key,""),i(n.todayGithubDeletedCommits.key,""),i(n.todayTicktickAddedTasks.key,""),i(n.todayTicktickCompletedTasks.key,""),i(n.todayTicktickUpdateTasks.key,""),r.info(`${this.today_date} stats were reseted!`)}getTodayEvents(){return{addedGithubCommits:t(n.todayGithubAddedCommits.key),addedTicktickTasks:t(n.todayTicktickAddedTasks.key),completedTicktickTasks:t(n.todayTicktickCompletedTasks.key),deletedGithubCommits:t(n.todayGithubDeletedCommits.key),updatedTicktickTasks:t(n.todayTicktickUpdateTasks.key)}}sync(){return e(this,void 0,void 0,(function*(){const t=this.configs[g],i=this.configs[h];if(!t&&!i)return void r.info("nothing to sync");(e=>{let t=!1;e.forEach((e=>{c(e)||(d(e),r.info(`created google calendar: [${e}]`),t=!0)})),t&&Utilities.sleep(2e3)})([...new Set([].concat(t?[this.configs[g].commits_configs.commits_calendar,this.configs[g].issues_configs.issues_calendar]:[]).concat(i?[...this.configs[h].ics_calendars.map((e=>e.gcal)),...this.configs[h].ics_calendars.map((e=>e.gcal_done))]:[]))]),t&&(yield function(t){return e(this,void 0,void 0,(function*(){const e={githubCommits:yield f(t[g].username,t[g].personal_token),githubGcalCommits:m([t[g].commits_configs.commits_calendar])};console.log(e.githubCommits.length);const i=e.githubCommits.sort(((e,t)=>Number(new Date(t.commitDate))-Number(new Date(e.commitDate)))).filter((e=>e.repository.includes(t[g].username))).filter((e=>!1===t[g].commits_configs.ignored_repos.includes(e.repositoryName)));console.log({onlyCommitsFromValidRepositories:i});for(const o of i)if(console.log(o),!e.githubGcalCommits.filter((e=>e.extendedProperties.private.repository===o.repository)).find((e=>e.extendedProperties.private.commitDate===o.commitDate&&_(e.extendedProperties.private.commitMessage)===_(o.commitMessage)))){t[g].commits_configs.parse_commit_emojis?_(o.commitMessage):o.commitMessage;o.commitDate,o.repository,o.repositoryName,o.repository,o.commitUrl,o.commitDate,o.commitDate,console.log(`add commit to gcal: ${o.repositoryName}`)}}))}(this.configs))}))}}}));
