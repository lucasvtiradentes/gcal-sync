!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,i,n){return new(i||(i=Promise))((function(o,s){function r(e){try{d(n.next(e))}catch(e){s(e)}}function a(e){try{d(n.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}d((n=n.apply(e,t||[])).next())}))}function t(e){const t=PropertiesService.getScriptProperties().getProperty(e);let i;try{i=JSON.parse(t)}catch(e){i=t}return i}function i(e,t){const i="string"==typeof t?t:JSON.stringify(t);PropertiesService.getScriptProperties().setProperty(e,i)}function n(e){const t=ScriptApp.getProjectTriggers().find((t=>t.getHandlerFunction()===e));t&&ScriptApp.deleteTrigger(t)}"function"==typeof SuppressedError&&SuppressedError;const o=e=>e.reduce(((e,t)=>e.concat(t)),[]);function s(e,t){const i=e.filter((e=>!t.includes(e))),n=t.filter((t=>!e.includes(t)));return i.concat(n)}const r=(e,t,i)=>e.reduce(((e,n)=>{const o=n[t],s=n[i];return e[o]=s,e}),{}),a={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500,REQUIRED_GITHUB_VALIDATIONS_COUNT:3},d=[{key:"today_ticktick_added_tasks",initial_value:[]},{key:"today_ticktick_updated_tasks",initial_value:[]},{key:"today_ticktick_completed_tasks",initial_value:[]},{key:"today_github_added_commits",initial_value:[]},{key:"today_github_deleted_commits",initial_value:[]},{key:"last_released_version_alerted",initial_value:""},{key:"last_released_version_sent_date",initial_value:""},{key:"last_daily_email_sent_date",initial_value:""},{key:"github_commits_tracked_to_be_added",initial_value:[]},{key:"github_commits_tracked_to_be_deleted",initial_value:[]},{key:"github_commit_changes_count",initial_value:""}],c=r(d,"key","initial_value"),l=r(d,"key","key"),m={info:(e,...t)=>{console.log(e,...t)},error:(e,...t)=>{console.error(e,...t)}},_=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},u=e=>_().find((t=>t.summary===e)),p=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const i=t.newCalendar();i.summary=e,i.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(i)};function h(e){return _().find((t=>t.summary===e))}function g(e){return e.reduce(((e,t)=>{const i=function(e){return Calendar.Events.list(e.id,{maxResults:a.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,i,n,o,s;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(i=e.attendees)&&void 0!==i?i:[],reminders:null!==(n=e.reminders)&&void 0!==n?n:{},visibility:null!==(o=e.visibility)&&void 0!==o?o:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(s=e.extendedProperties)&&void 0!==s?s:{}}}(e)))}(h(t));return[...e,...i]}),[])}function f(e,t){return Calendar.Events.insert(t,e.id)}function y(e,t,i){b(e,i),Utilities.sleep(2e3);return f(t,i)}function b(e,t){Calendar.Events.remove(e.id,t.id)}function k(e){MailApp.sendEmail(e)}const v={name:"gcal-sync",github_repository:"lucasvtiradentes/gcal-sync",version:"1.8.1",build_date_time:"22/01/2024 08:58:59"},$={invalid_configs:"schema invalid",production_only:"This method cannot run in non-production environments",incorrect_ics_calendar:"The link you provided is not a valid ICS calendar: ",abusive_google_calendar_api_use:"Due to the numerous operations in the last few hours, the google api is not responding.",invalid_ics_calendar_link:"You provided an invalid ICS calendar link: ",invalid_github_token:"You provided an invalid github token",invalid_github_username:"You provided an invalid github username"},T="ticktick_sync",w="github_sync";const S={tableStyle:'style="border: 1px solid #333; width: 90%"',tableRowStyle:'style="width: 100%"',tableRowColumnStyle:'style="border: 1px solid #333"'},I=e=>"date"in e?e.date:e.dateTime;function C(e){return e.added_tasks.length+e.updated_tasks.length+e.completed_tasks.length+e.commits_added.length+e.commits_deleted.length}function D(e){let t="";return t=`Hi!<br/><br/>there were ${C(e)} changes made to your google calendar:<br/>\n`,t+=function(e){const t=e.added_tasks,i=e.updated_tasks,n=e.completed_tasks,o=e=>0===e.length?"":`${e.map((e=>{const t=[I(e.start).split("T")[0],e.extendedProperties.private.calendar,`<a href="${e.htmlLink}">${e.summary}</a>`].map((e=>`<td ${S.tableRowColumnStyle}>&nbsp;&nbsp;${e}</td>`)).join("\n");return`<tr ${S.tableRowStyle}">\n${t}\n</tr>`})).join("\n")}`,s=`<tr ${S.tableRowStyle}">\n<th ${S.tableRowColumnStyle} width="80px">date</th><th ${S.tableRowColumnStyle} width="130px">calendar</th><th ${S.tableRowColumnStyle} width="auto">task</th>\n</tr>`;let r="";return r+=t.length>0?`<br/>added ticktick events    : ${t.length}<br/><br/> \n <center>\n<table ${S.tableStyle}>\n${s}\n${o(t)}\n</table>\n</center>\n`:"",r+=i.length>0?`<br/>updated ticktick events  : ${i.length}<br/><br/> \n <center>\n<table ${S.tableStyle}>\n${s}\n${o(i)}\n</table>\n</center>\n`:"",r+=n.length>0?`<br/>completed ticktick events: ${n.length}<br/><br/> \n <center>\n<table ${S.tableStyle}>\n${s}\n${o(n)}\n</table>\n</center>\n`:"",r}(e),t+=function(e){const t=e.commits_added,i=e.commits_deleted,n=e=>0===e.length?"":`${e.map((e=>{const t=[I(e.start).split("T")[0],e.extendedProperties.private.repositoryName,`<a href="${e.htmlLink}">${e.extendedProperties.private.commitMessage}</a>`].map((e=>`<td ${S.tableRowColumnStyle}>&nbsp;&nbsp;${e}</td>`)).join("\n");return`<tr ${S.tableRowStyle}">\n${t}\n</tr>`})).join("\n")}`,o=`<tr ${S.tableRowStyle}">\n<th ${S.tableRowColumnStyle} width="80px">date</th><th ${S.tableRowColumnStyle} width="130px">repository</th><th ${S.tableRowColumnStyle} width="auto">commit</th>\n</tr>`;let s="";return s+=t.length>0?`<br/>added commits events     : ${t.length}<br/><br/> \n <center>\n<table ${S.tableStyle}>\n${o}\n${n(t)}\n</table>\n</center>\n`:"",s+=i.length>0?`<br/>removed commits events   : ${i.length}<br/><br/> \n <center>\n<table ${S.tableStyle}>\n${o}\n${n(i)}\n</table>\n</center>\n`:"",s}(e),t+=`<br/>Regards,<br/>your <a href='https://github.com/${v.github_repository}'>${v.name}</a> bot`,t}function E(t,i){var n;return e(this,void 0,void 0,(function*(){const e=[];let o=1,s=!1;for(;!1===s;){const r=`https://api.github.com/search/commits?q=author:${t}&page=${o}&sort=committer-date&per_page=100`;let a;a=""!==i?UrlFetchApp.fetch(r,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${i}`}}):UrlFetchApp.fetch(r,{muteHttpExceptions:!0});const d=null!==(n=JSON.parse(a.getContentText()))&&void 0!==n?n:{};if(200!==a.getResponseCode()){if("Validation Failed"===d.message)throw new Error($.invalid_github_username);if("Bad credentials"===d.message)throw new Error($.invalid_github_token);throw new Error(d.message)}const c=d.items;if(0===c.length){s=!0;break}if(e.push(...c),o++,o>10){s=!0;break}}return e.map((e=>({commitDate:e.commit.committer.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}function R(e){const t={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=e;for(const[e,n]of Object.entries(t))i=i.replace(e,n);return i}function A(){i("github_commit_changes_count","0"),i("github_commits_tracked_to_be_added",[]),i("github_commits_tracked_to_be_deleted",[])}function N(n){return e(this,void 0,void 0,(function*(){const o={githubCommits:yield E(n[w].username,n[w].personal_token),githubGcalCommits:g([n[w].commits_configs.commits_calendar])},r=t("github_commit_changes_count"),d=Number(r)+1;null===r&&A(),i("github_commit_changes_count",d.toString()),1===d?m.info(`checking commit changes: ${d}/${a.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):d>1&&d<a.REQUIRED_GITHUB_VALIDATIONS_COUNT?m.info(`confirming commit changes: ${d}/${a.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):d===a.REQUIRED_GITHUB_VALIDATIONS_COUNT&&m.info(`making commit changes if succeed: ${d}/${a.REQUIRED_GITHUB_VALIDATIONS_COUNT}`);const c=h(n[w].commits_configs.commits_calendar),l=o.githubCommits.sort(((e,t)=>Number(new Date(t.commitDate))-Number(new Date(e.commitDate)))).filter((e=>e.repository.includes(n[w].username))).filter((e=>!1===n[w].commits_configs.ignored_repos.includes(e.repositoryName))),_=Object.assign(Object.assign({},yield function({onlyCommitsFromValidRepositories:n,currentGithubSyncIndex:o,githubCalendar:r,githubGcalCommits:d,parseCommitEmojis:c}){return e(this,void 0,void 0,(function*(){const e={commits_tracked_to_be_added:[],commits_added:[]};for(const t of n){if(!d.filter((e=>e.extendedProperties.private.repository===t.repository)).find((e=>e.extendedProperties.private.commitDate===t.commitDate&&R(e.extendedProperties.private.commitMessage)===R(t.commitMessage)))){const i=c?R(t.commitMessage):t.commitMessage,n={private:{commitMessage:i,commitDate:t.commitDate,repository:t.repository,repositoryName:t.repositoryName,commitId:t.commitId}},o={summary:`${t.repositoryName} - ${i}`,description:`repository: https://github.com/${t.repository}\ncommit: ${t.commitUrl}`,start:{dateTime:t.commitDate},end:{dateTime:t.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:n};e.commits_tracked_to_be_added.push(o)}}if(1===o)return i("github_commits_tracked_to_be_added",e.commits_tracked_to_be_added.map((e=>e))),e;if(s(t("github_commits_tracked_to_be_added").map((e=>e.extendedProperties.private.commitId)),e.commits_tracked_to_be_added.map((e=>e.extendedProperties.private.commitId))).length>0)return m.info("reset github commit properties due differences in added commits"),A(),e;if(o===a.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commits_tracked_to_be_added.length>0){m.info(`adding ${e.commits_tracked_to_be_added.length} commits to gcal`);for(let t=0;t<e.commits_tracked_to_be_added.length;t++)try{const i=e.commits_tracked_to_be_added[t],n=f(r,i);e.commits_added.push(i),m.info(`${t+1}/${e.commits_tracked_to_be_added.length} add new commit to gcal: ${i.extendedProperties.private.commitDate} - ${n.extendedProperties.private.repositoryName} - ${n.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{A()}}return e}))}({currentGithubSyncIndex:d,githubCalendar:c,githubGcalCommits:o.githubGcalCommits,onlyCommitsFromValidRepositories:l,parseCommitEmojis:n[w].commits_configs.parse_commit_emojis})),yield function({githubGcalCommits:n,githubCalendar:o,currentGithubSyncIndex:r,onlyCommitsFromValidRepositories:d}){return e(this,void 0,void 0,(function*(){const e={commits_deleted:[],commits_tracked_to_be_deleted:[]};if(n.forEach((t=>{const i=t.extendedProperties.private;d.filter((e=>e.repository===i.repository)).find((e=>e.commitDate===i.commitDate&&R(e.commitMessage)===R(i.commitMessage)))||e.commits_tracked_to_be_deleted.push(t)})),1===r)return i("github_commits_tracked_to_be_deleted",e.commits_tracked_to_be_deleted),e;if(s(t("github_commits_tracked_to_be_deleted").map((e=>e.extendedProperties.private.commitId)),e.commits_tracked_to_be_deleted.map((e=>e.extendedProperties.private.commitId))).length>0)return m.info("reset github commit properties due differences in deleted commits"),A(),e;if(r===a.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commits_tracked_to_be_deleted.length>0){m.info(`deleting ${e.commits_tracked_to_be_deleted.length} commits on gcal`);for(let t=0;t<e.commits_tracked_to_be_deleted.length;t++)try{const i=e.commits_tracked_to_be_deleted[t];b(o,i),e.commits_deleted.push(i),m.info(`${t+1}/${e.commits_tracked_to_be_deleted.length} deleted commit on gcal: ${i.extendedProperties.private.commitDate} - ${i.extendedProperties.private.repositoryName} - ${i.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{A()}}return e}))}({currentGithubSyncIndex:d,githubCalendar:c,githubGcalCommits:o.githubGcalCommits,onlyCommitsFromValidRepositories:l}));return 0===_.commits_tracked_to_be_added.length&&0===_.commits_tracked_to_be_deleted.length&&(m.info("reset github commit properties due found no commits tracked"),A()),_}))}function O(e){const t=new Date;return t.setHours(t.getHours()+e),t}function P(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}const x=(e,t,i)=>{const n=e.slice(e.search(t)).replace(t,"");return n.slice(0,n.search(i))},U=(t,i)=>e(void 0,void 0,void 0,(function*(){const e=t.replace("webcal://","https://"),n=UrlFetchApp.fetch(e,{validateHttpsCertificates:!1,muteHttpExceptions:!0}),o=n.getContentText()||"";if(200!==n.getResponseCode())throw new Error($.invalid_ics_calendar_link+e);if(-1===o.search("BEGIN:VCALENDAR"))throw new Error($.incorrect_ics_calendar);const s=o.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)),r=(o.search("SUMMARY:No task.")>0?[]:s.reduce(((e,t)=>{const i=t.split("BEGIN:VALARM\r\n");return[...e,{CALNAME:x(o,"X-WR-CALNAME:","\r\n"),DSTAMP:x(t,"DTSTAMP:","\r\n"),DTSTART:x(t,"DTSTART;","\r\n"),DTEND:x(t,"DTEND;","\r\n"),SUMMARY:x(t,"SUMMARY:","\r\n"),UID:x(t,"UID:","\r\n"),DESCRIPTION:x(t,"DESCRIPTION:","\r\n"),SEQUENCE:x(t,"SEQUENCE:","\r\n"),TZID:x(t,"TZID:","\r\n"),ALARM_TRIGGER:1===i.length?"":x(i[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===i.length?"":x(i[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===i.length?"":x(i[1],"DESCRIPTION:","\r\n")}]}),[])).map((e=>{const t=function(e,t,i,n){let o=e,s=t;if(o=o.slice(o.search(":")+1),s=s.slice(s.search(":")+1),""===s){const e=P(o),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),s={date:t.toISOString().split("T")[0]},o={date:`${e.year}-${e.month}-${e.day}`}}else{const e=P(o),t=P(s),r=(e=>0===e?"":`${e<0?"-":"+"}${String(Math.abs(e)).padStart(2,"0")}:00`)(n);o={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}${r}`,timeZone:i},s={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}${r}`,timeZone:i}}return{finalDtstart:o,finalDtend:s}}(e.DTSTART,e.DTEND,e.TZID,i);return{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:t.finalDtstart,end:t.finalDtend}}));return r}));function M(t){return e(this,void 0,void 0,(function*(){const i=t[T].ics_calendars,n={ticktickTasks:yield B(i,t.settings.timezone_correction),ticktickGcalTasks:g([...new Set(i.map((e=>e.gcal)))])};return Object.assign(Object.assign({},yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={added_tasks:[],updated_tasks:[]};for(const n of i){const i=t.find((e=>e.extendedProperties.private.tickTaskId===n.id)),o=h(n.gcal);if(i){const t=o.summary!==i.extendedProperties.private.calendar,s=yield L(n,i),r=h(n.gcal_done);if(t){const t=y(o,r,Object.assign(Object.assign({},i),{colorId:void 0}));e.updated_tasks.push(t)}else if(s.length>0){const t=y(o,r,Object.assign(Object.assign({},i),{colorId:void 0}));e.updated_tasks.push(t)}}else{const t=yield G(o,n);e.added_tasks.push(t)}}return e}))}(n)),yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={completed_tasks:[]},n=t.filter((e=>{var t,i;return null===(i=null===(t=e.extendedProperties)||void 0===t?void 0:t.private)||void 0===i?void 0:i.tickTaskId}));for(const t of n){if(!i.map((e=>e.id)).includes(t.extendedProperties.private.tickTaskId)){const i=y(h(t.extendedProperties.private.calendar),h(t.extendedProperties.private.completedCalendar),Object.assign(Object.assign({},t),{colorId:void 0}));e.completed_tasks.push(i)}}return e}))}(n))}))}const j=e=>{let t=e;return t=t.replace(/\\,/g,","),t=t.replace(/\\;/g,";"),t=t.replace(/\\"/g,'"'),t=t.replace(/\\\\/g,"\\"),t};function G(t,i){return e(this,void 0,void 0,(function*(){const n=yield function(t){return e(this,void 0,void 0,(function*(){const e={private:{calendar:t.gcal,completedCalendar:t.gcal_done,tickTaskId:t.id}},i=(null==t?void 0:t.color)?{colorId:t.color.toString()}:{};var n;return Object.assign({summary:j(t.name),description:(n=t,`task: https://ticktick.com/webapp/#q/all/tasks/${n.id.split("@")[0]}${n.description?"\n\n"+n.description.replace(/\\n/g,"\n"):""}`),start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:e},i)}))}(i);try{return f(t,n)}catch(e){throw e.message.search("API call to calendar.events.insert failed with error: Required")>-1?new Error($.abusive_google_calendar_api_use):new Error(e.message)}}))}function L(t,i){return e(this,void 0,void 0,(function*(){return[{hasChanged:j(t.name)!==i.summary,field:"name"},{hasChanged:Object.keys(t.start).length!==Object.keys(i.start).length,field:"date format"},{hasChanged:t.start.date!==i.start.date||t.start.dateTime!==i.start.dateTime,field:"initial date"},{hasChanged:t.end.date!==i.end.date||t.end.dateTime!==i.end.dateTime,field:"final date"},{hasChanged:(()=>{let e=!1;return e=void 0===(null==t?void 0:t.color)?void 0!==i.colorId:t.color.toString()!==i.colorId,e})(),field:"color"}].filter((e=>e.hasChanged)).map((e=>e.field))}))}function H(t,i){return e(this,void 0,void 0,(function*(){return o(yield Promise.all(t.map((t=>e(this,void 0,void 0,(function*(){return(yield U(t.link,i)).map((e=>Object.assign(Object.assign({},e),t)))}))))))}))}function B(t,i){return e(this,void 0,void 0,(function*(){const e=yield H(t.filter((e=>e.tag)),i),n=(yield H(t.filter((e=>e.ignoredTags)),i)).filter((t=>{const i=e.map((e=>`${e.tag}${e.id}`));return!1===t.ignoredTags.some((e=>i.includes(`${e}${t.id}`)))})),o=yield H(t.filter((e=>!e.tag&&!e.ignoredTags)),i);return[...e,...n,...o]}))}function V(e){return"object"==typeof e&&null!==e}function F(e,t){if(!V(e))return!1;for(const i in t){if(!(i in e))return m.error(`Missing key: ${i}`),!1;const n=typeof t[i],o=typeof e[i];if(V(t[i])){if(!V(e[i])||!F(e[i],t[i]))return m.error(`Invalid nested structure or type mismatch at key: ${i}`),!1}else if(n!==o)return m.error(`Type mismatch at key: ${i}. Expected ${n}, found ${o}`),!1}return!0}function z(e,t){return F(e,t)}const Q={settings:{sync_function:"",timezone_correction:-3,update_frequency:4},options:{daily_summary_email_time:"15:00",email_new_gcal_sync_release:!1,email_daily_summary:!1,email_errors:!1,email_session:!1}},Y={ics_calendars:[]},Z={username:"",commits_configs:{commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},personal_token:""};return class{constructor(e){if(this.configs=e,!function(e){if(!V(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=z(e,Q),T in e&&(t.ticktick=z(e[T],Y)),w in e&&(t.github=z(e[w],Z)),Object.values(t).every((e=>!0===e))}(e))throw new Error($.invalid_configs);if("undefined"==typeof Calendar)throw new Error($.production_only);this.today_date=O(this.configs.settings.timezone_correction).toISOString().split("T")[0],m.info(`${v.name} is running at version ${v.version}!`)}createMissingGASProperties(){const e=PropertiesService.getScriptProperties().getProperties();Object.keys(l).forEach((t=>{Object.keys(e).includes(t)||i(l[t],c[t])}))}createMissingGcalCalendars(){const e=this.configs[w],t=this.configs[T];(e=>{let t=!1;e.forEach((e=>{u(e)||(p(e),m.info(`created google calendar: [${e}]`),t=!0)})),t&&Utilities.sleep(2e3)})([...new Set([].concat(e?[this.configs[w].commits_configs.commits_calendar]:[]).concat(t?[...this.configs[T].ics_calendars.map((e=>e.gcal)),...this.configs[T].ics_calendars.map((e=>e.gcal_done))]:[]))])}install(){return e(this,void 0,void 0,(function*(){var e,t;n(this.configs.settings.sync_function),e=this.configs.settings.sync_function,t=this.configs.settings.update_frequency,ScriptApp.newTrigger(e).timeBased().everyMinutes(t).create(),this.createMissingGASProperties(),m.info(`${v.name} was set to run function "${this.configs.settings.sync_function}" every ${this.configs.settings.update_frequency} minutes`)}))}uninstall(){return e(this,void 0,void 0,(function*(){n(this.configs.settings.sync_function),Object.keys(l).forEach((e=>{var t;t=l[e],PropertiesService.getScriptProperties().deleteProperty(t)})),m.info(`${v.name} automation was removed from appscript!`)}))}getTodayStats(){return{added_tasks:t(l.today_ticktick_added_tasks),updated_tasks:t(l.today_ticktick_updated_tasks),completed_tasks:t(l.today_ticktick_completed_tasks),commits_added:t(l.today_github_added_commits),commits_deleted:t(l.today_github_deleted_commits)}}showTodayStats(){m.info(this.getTodayStats())}clearTodayEvents(){i(l.today_github_added_commits,[]),i(l.today_github_deleted_commits,[]),i(l.today_ticktick_added_tasks,[]),i(l.today_ticktick_completed_tasks,[]),i(l.today_ticktick_updated_tasks,[]),m.info(`${this.today_date} stats were reseted!`)}sync(){return e(this,void 0,void 0,(function*(){const e=this.configs[w],t=this.configs[T];if(!e&&!t)return void m.info("nothing to sync");this.createMissingGcalCalendars(),this.createMissingGASProperties();const i=yield M(this.configs),n=yield N(this.configs),o=Object.assign(Object.assign(Object.assign({},{added_tasks:[],updated_tasks:[],completed_tasks:[],commits_added:[],commits_deleted:[]}),t&&i),e&&n);yield this.handleSessionData(o)}))}handleSessionData(n){var o;return e(this,void 0,void 0,(function*(){const e=this.configs[T],s=this.configs[w],r=n.added_tasks.length+n.updated_tasks.length+n.completed_tasks.length;if(e&&r>0){const e=t(l.today_ticktick_added_tasks),o=t(l.today_ticktick_updated_tasks),s=t(l.today_ticktick_completed_tasks);i(l.today_ticktick_added_tasks,[...e,...n.added_tasks]),i(l.today_ticktick_updated_tasks,[...o,...n.updated_tasks]),i(l.today_ticktick_completed_tasks,[...s,...n.completed_tasks]),m.info(`added ${r} new ticktick items to today's stats`)}const a=n.commits_added.length+n.commits_deleted.length;if(s&&a>0){const e=t(l.today_github_added_commits),o=t(l.today_github_deleted_commits);i(l.today_github_added_commits,[...e,...n.commits_added]),i(l.today_github_deleted_commits,[...o,...n.commits_deleted]),m.info(`added ${a} new github items to today's stats`)}const d=r+a,c=Session?Session.getActiveUser().getEmail():"";if(this.configs.options.email_session&&d>0){k(function(e,t){const i=D(t);return{to:e,name:`${v.name}`,subject:`session report - ${C(t)} modifications - ${v.name}`,htmlBody:i}}(c,n))}const _=function(e,t){const i=O(t),n=60*Number(i.getHours())+Number(i.getMinutes()),o=e.split(":");return n>=60*Number(o[0])+Number(o[1])}(this.configs.options.daily_summary_email_time,this.configs.settings.timezone_correction),u=this.today_date===t(l.last_daily_email_sent_date);if(_&&this.configs.options.email_daily_summary&&!u){i(l.last_daily_email_sent_date,this.today_date);k(function(e,t,i){const n=D(t);return{to:e,name:`${v.name}`,subject:`daily report for ${i} - ${C(t)} modifications - ${v.name}`,htmlBody:n}}(c,this.getTodayStats(),this.today_date)),this.clearTodayEvents()}const p=this.today_date===t(l.last_released_version_sent_date),h=e=>Number(e.replace("v","").split(".").join(""));if(_&&this.configs.options.email_new_gcal_sync_release&&!p){i(l.last_released_version_sent_date,this.today_date);const e=(()=>{var e;const t=UrlFetchApp.fetch(`https://api.github.com/repos/${v.github_repository}/releases?per_page=1`);return null!==(e=JSON.parse(t.getContentText())[0])&&void 0!==e?e:{tag_name:v.version}})(),n=h(e.tag_name),s=h(v.version),r=null!==(o=t(l.last_released_version_alerted))&&void 0!==o?o:"";if(n>s&&n.toString()!=r){k(function(e,t){const i=`Hi!\n    <br/><br/>\n    a new <a href="https://github.com/${v.github_repository}">${v.name}</a> version is available: <br/>\n    <ul>\n      <li>new version: ${t.tag_name}</li>\n      <li>published at: ${t.published_at}</li>\n      <li>details: <a href="https://github.com/${v.github_repository}/releases">here</a></li>\n    </ul>\n    to update, replace the old version number in your apps scripts <a href="https://script.google.com/">gcal sync project</a> to the new version: ${t.tag_name.replace("v","")}<br/>\n    and also check if you need to change the setup code in the <a href='https://github.com/${v.github_repository}#installation'>installation section</a>.\n    <br /><br />\n    Regards,\n    your <a href='https://github.com/${v.github_repository}'>${v.name}</a> bot\n  `;return{to:e,name:`${v.name}`,subject:`new version [${t.tag_name}] was released - ${v.name}`,htmlBody:i}}(c,e)),i(l.last_released_version_alerted,n.toString())}}m.info({sessionData:n})}))}}}));
