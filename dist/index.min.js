!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,i,o){return new(i||(i=Promise))((function(s,n){function r(e){try{c(o.next(e))}catch(e){n(e)}}function a(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((o=o.apply(e,t||[])).next())}))}function t(e){const t=PropertiesService.getScriptProperties().getProperty(e);let i;try{i=JSON.parse(t)}catch(e){i=t}return i}function i(e,t){const i="string"==typeof t?t:JSON.stringify(t);PropertiesService.getScriptProperties().setProperty(e,i)}function o(e){const t=ScriptApp.getProjectTriggers().find((t=>t.getHandlerFunction()===e));t&&ScriptApp.deleteTrigger(t)}"function"==typeof SuppressedError&&SuppressedError;const s={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500,REQUIRED_GITHUB_VALIDATIONS_COUNT:3,EVENTS_DIVIDER:" | "},n={today_ticktick_added_tasks:{key:"today_ticktick_added_tasks",schema:{}},today_ticktick_updated_tasks:{key:"today_ticktick_updated_tasks",schema:{}},today_ticktick_completed_tasks:{key:"today_ticktick_completed_tasks",schema:{}},today_github_added_commits:{key:"today_github_added_commits",schema:{}},today_github_deleted_commits:{key:"today_github_deleted_commits",schema:{}},last_released_version_alerted:{key:"last_released_version_alerted",schema:{}},last_daily_email_sent_date:{key:"last_daily_email_sent_date",schema:{}},github_last_added_commits:{key:"github_last_added_commits",schema:{}},github_last_deleted_commits:{key:"github_last_deleted_commits",schema:{}},github_commit_changes_count:{key:"github_commit_changes_count",schema:{}}},r={info:(e,...t)=>{console.log(e,...t)},error:(e,...t)=>{console.error(e,...t)}},a=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},c=e=>a().find((t=>t.summary===e)),d=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const i=t.newCalendar();i.summary=e,i.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(i)};function m(e){return a().find((t=>t.summary===e))}function l(e){return e.reduce(((e,t)=>{const i=function(e){return Calendar.Events.list(e.id,{maxResults:s.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,i,o,s,n;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(i=e.attendees)&&void 0!==i?i:[],reminders:null!==(o=e.reminders)&&void 0!==o?o:{},visibility:null!==(s=e.visibility)&&void 0!==s?s:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(n=e.extendedProperties)&&void 0!==n?n:{}}}(e)))}(m(t));return[...e,...i]}),[])}function u(e,t){try{return Calendar.Events.insert(t,e.id)}catch(e){return r.info(`error when adding event [${t.summary}] to gcal: ${e.message}`),t}}function p(e,t,i){g(e,i),Utilities.sleep(2e3);return u(t,i)}function g(e,t){try{Calendar.Events.remove(e.id,t.id)}catch(e){r.info(`error when deleting event [${t.summary}] to gcal: ${e.message}`)}}const _="gcal-sync",h="2.0.0",f="lucasvtiradentes/gcal-sync",y="ticktick_sync",k="github_sync",T={productionOnly:"This method cannot run in non-production environments",incorrectIcsCalendar:"The link you provided is not a valid ICS calendar: ",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: ",invalidGithubToken:"You provided an invalid github token",invalidGithubUsername:"You provided an invalid github username",abusiveGoogleCalendarApiUse:"Due to the numerous operations in the last few hours, the google api is not responding."};function v(t,i){var o;return e(this,void 0,void 0,(function*(){const e=[];let s=1,n=!1;for(;!1===n;){const r=`https://api.github.com/search/commits?q=author:${t}&page=${s}&sort=committer-date&per_page=100`;let a;a=""!==i?UrlFetchApp.fetch(r,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${i}`}}):UrlFetchApp.fetch(r,{muteHttpExceptions:!0});const c=null!==(o=JSON.parse(a.getContentText()))&&void 0!==o?o:{};if(200!==a.getResponseCode()){if("Validation Failed"===c.message)throw new Error(T.invalidGithubUsername);if("Bad credentials"===c.message)throw new Error(T.invalidGithubToken);throw new Error(c.message)}const d=c.items;if(0===d.length){n=!0;break}if(e.push(...d),s++,s>10){n=!0;break}}return e.map((e=>({commitDate:e.commit.committer.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}function b(e){const t={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=e;for(const[e,o]of Object.entries(t))i=i.replace(e,o);return i}const I=e=>e.reduce(((e,t)=>e.concat(t)),[]);function D(e,t){const i=e.filter((e=>!t.includes(e))),o=t.filter((t=>!e.includes(t)));return i.concat(o)}function A(){i("github_commit_changes_count","0"),i("github_last_added_commits",[]),i("github_last_deleted_commits",[])}function E(o){return e(this,void 0,void 0,(function*(){const n={githubCommits:yield v(o[k].username,o[k].personal_token),githubGcalCommits:l([o[k].commits_configs.commits_calendar])},a=t("github_commit_changes_count"),c=Number(a)+1;null===a&&A(),i("github_commit_changes_count",c.toString()),1===c?r.info(`checking commit changes: ${c}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):c>1&&c<s.REQUIRED_GITHUB_VALIDATIONS_COUNT?r.info(`confirming commit changes: ${c}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):c===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&r.info(`making commit changes if succeed: ${c}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`);const d=m(o[k].commits_configs.commits_calendar),p=n.githubCommits.sort(((e,t)=>Number(new Date(t.commitDate))-Number(new Date(e.commitDate)))).filter((e=>e.repository.includes(o[k].username))).filter((e=>!1===o[k].commits_configs.ignored_repos.includes(e.repositoryName))),_=Object.assign(Object.assign({},yield function({onlyCommitsFromValidRepositories:o,currentGithubSyncIndex:n,githubCalendar:a,githubGcalCommits:c,parseCommitEmojis:d}){return e(this,void 0,void 0,(function*(){const e={commitsTrackedToBeAdded:[],commitsAdded:[]};for(const t of o){if(!c.filter((e=>e.extendedProperties.private.repository===t.repository)).find((e=>e.extendedProperties.private.commitDate===t.commitDate&&b(e.extendedProperties.private.commitMessage)===b(t.commitMessage)))){const i=d?b(t.commitMessage):t.commitMessage,o={private:{commitMessage:i,commitDate:t.commitDate,repository:t.repository,repositoryName:t.repositoryName,commitId:t.commitId}},s={summary:`${t.repositoryName} - ${i}`,description:`repository: https://github.com/${t.repository}\ncommit: ${t.commitUrl}`,start:{dateTime:t.commitDate},end:{dateTime:t.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:o};e.commitsTrackedToBeAdded.push(s)}}if(1===n)return i("github_last_added_commits",e.commitsTrackedToBeAdded.map((e=>e))),e;if(D(t("github_last_added_commits").map((e=>e.extendedProperties.private.commitId)),e.commitsTrackedToBeAdded.map((e=>e.extendedProperties.private.commitId))).length>0)return r.info("reset github commit properties due differences in added commits"),A(),e;if(n===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commitsTrackedToBeAdded.length>0){r.info(`adding ${e.commitsTrackedToBeAdded.length} commits to gcal`);for(let t=0;t<e.commitsTrackedToBeAdded.length;t++)try{const i=e.commitsTrackedToBeAdded[t],o=u(a,i);e.commitsAdded.push(i),r.info(`${t+1}/${e.commitsTrackedToBeAdded.length} add new commit to gcal: ${i.extendedProperties.private.commitDate} - ${o.extendedProperties.private.repositoryName} - ${o.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{A()}}return e}))}({currentGithubSyncIndex:c,githubCalendar:d,githubGcalCommits:n.githubGcalCommits,onlyCommitsFromValidRepositories:p,parseCommitEmojis:o[k].commits_configs.parse_commit_emojis})),yield function({githubGcalCommits:o,githubCalendar:n,currentGithubSyncIndex:a,onlyCommitsFromValidRepositories:c}){return e(this,void 0,void 0,(function*(){const e={commitsDeleted:[],commitsTrackedToBeDelete:[]};if(o.forEach((t=>{const i=t.extendedProperties.private;c.filter((e=>e.repository===i.repository)).find((e=>e.commitDate===i.commitDate&&b(e.commitMessage)===b(i.commitMessage)))||e.commitsTrackedToBeDelete.push(t)})),1===a)return i("github_last_deleted_commits",e.commitsTrackedToBeDelete),e;if(D(t("github_last_deleted_commits").map((e=>e.extendedProperties.private.commitId)),e.commitsTrackedToBeDelete.map((e=>e.extendedProperties.private.commitId))).length>0)return r.info("reset github commit properties due differences in deleted commits"),A(),e;if(a===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commitsTrackedToBeDelete.length>0){r.info(`deleting ${e.commitsTrackedToBeDelete.length} commits on gcal`);for(let t=0;t<e.commitsTrackedToBeDelete.length;t++)try{const i=e.commitsTrackedToBeDelete[t];g(n,i),e.commitsDeleted.push(i),r.info(`${t+1}/${e.commitsTrackedToBeDelete.length} deleted commit on gcal: ${i.extendedProperties.private.commitDate} - ${i.extendedProperties.private.repositoryName} - ${i.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{A()}}return e}))}({currentGithubSyncIndex:c,githubCalendar:d,githubGcalCommits:n.githubGcalCommits,onlyCommitsFromValidRepositories:p}));return 0===_.commitsTrackedToBeAdded.length&&0===_.commitsTrackedToBeDelete.length&&(r.info("reset github commit properties due found no commits tracked"),A()),_}))}function C(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}const S=(e,t,i)=>{const o=e.slice(e.search(t)).replace(t,"");return o.slice(0,o.search(i))},w=(t,i)=>e(void 0,void 0,void 0,(function*(){const e=t.replace("webcal://","https://"),o=UrlFetchApp.fetch(e,{validateHttpsCertificates:!1,muteHttpExceptions:!0}),s=o.getContentText()||"";if(200!==o.getResponseCode())throw new Error(T.httpsError+e);if(-1===s.search("BEGIN:VCALENDAR"))throw new Error("RESPOSTA INVALIDA PRA UM ICS");const n=s.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)),r=(s.search("SUMMARY:No task.")>0?[]:n.reduce(((e,t)=>{const i=t.split("BEGIN:VALARM\r\n");return[...e,{CALNAME:S(s,"X-WR-CALNAME:","\r\n"),DSTAMP:S(t,"DTSTAMP:","\r\n"),DTSTART:S(t,"DTSTART;","\r\n"),DTEND:S(t,"DTEND;","\r\n"),SUMMARY:S(t,"SUMMARY:","\r\n"),UID:S(t,"UID:","\r\n"),DESCRIPTION:S(t,"DESCRIPTION:","\r\n"),SEQUENCE:S(t,"SEQUENCE:","\r\n"),TZID:S(t,"TZID:","\r\n"),ALARM_TRIGGER:1===i.length?"":S(i[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===i.length?"":S(i[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===i.length?"":S(i[1],"DESCRIPTION:","\r\n")}]}),[])).map((e=>{const t=function(e,t,i,o){let s=e,n=t;if(s=s.slice(s.search(":")+1),n=n.slice(n.search(":")+1),""===n){const e=C(s),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),n={date:t.toISOString().split("T")[0]},s={date:`${e.year}-${e.month}-${e.day}`}}else{const e=C(s),t=C(n),r=(e=>0===e?"":`${e<0?"-":"+"}${String(Math.abs(e)).padStart(2,"0")}:00`)(o);s={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}${r}`,timeZone:i},n={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}${r}`,timeZone:i}}return{finalDtstart:s,finalDtend:n}}(e.DTSTART,e.DTEND,e.TZID,i);return{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:t.finalDtstart,end:t.finalDtend}}));return r}));function $(t){return e(this,void 0,void 0,(function*(){const i=t[y].ics_calendars,o={ticktickTasks:yield U(i,t.settings.timezone_correction),ticktickGcalTasks:l([...new Set(i.map((e=>e.gcal)))])};return Object.assign(Object.assign({},yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={added_tasks:[],updated_tasks:[]};for(const o of i){const i=t.find((e=>e.extendedProperties.private.tickTaskId===o.id)),s=m(o.gcal);if(i){const t=s.summary!==i.extendedProperties.private.calendar,n=yield R(o,i),r=m(o.gcal_done);(t||n.length>0)&&e.updated_tasks.push(p(s,r,Object.assign(Object.assign({},i),{colorId:void 0})))}else e.added_tasks.push(yield O(s,o))}return e}))}(o)),yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={completed_tasks:[]},o=t.filter((e=>{var t,i;return null===(i=null===(t=e.extendedProperties)||void 0===t?void 0:t.private)||void 0===i?void 0:i.tickTaskId}));for(const t of o){if(!i.map((e=>e.id)).includes(t.extendedProperties.private.tickTaskId)){const i=p(m(t.extendedProperties.private.calendar),m(t.extendedProperties.private.completedCalendar),Object.assign(Object.assign({},t),{colorId:void 0}));e.completed_tasks.push(i)}}return e}))}(o))}))}const N=e=>{let t=e;return t=t.replace(/\\,/g,","),t=t.replace(/\\;/g,";"),t=t.replace(/\\"/g,'"'),t=t.replace(/\\\\/g,"\\"),t};function O(t,i){return e(this,void 0,void 0,(function*(){const o=yield function(t){return e(this,void 0,void 0,(function*(){const e={private:{calendar:t.gcal,completedCalendar:t.gcal_done,tickTaskId:t.id}},i=(null==t?void 0:t.color)?{colorId:t.color.toString()}:{};var o;return Object.assign({summary:N(t.name),description:(o=t,`task: https://ticktick.com/webapp/#q/all/tasks/${o.id.split("@")[0]}${o.description?"\n\n"+o.description.replace(/\\n/g,"\n"):""}`),start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:e},i)}))}(i);try{return u(t,o)}catch(e){throw e.message.search("API call to calendar.events.insert failed with error: Required")>-1?new Error(T.abusiveGoogleCalendarApiUse):new Error(e.message)}}))}function R(t,i){return e(this,void 0,void 0,(function*(){return[{hasChanged:N(t.name)!==i.summary,field:"name"},{hasChanged:Object.keys(t.start).length!==Object.keys(i.start).length,field:"date format"},{hasChanged:t.start.date!==i.start.date||t.start.dateTime!==i.start.dateTime,field:"initial date"},{hasChanged:t.end.date!==i.end.date||t.end.dateTime!==i.end.dateTime,field:"final date"},{hasChanged:(()=>{let e=!1;return e=void 0===(null==t?void 0:t.color)?void 0!==i.colorId:t.color.toString()!==i.colorId,e})(),field:"color"}].filter((e=>e.hasChanged)).map((e=>e.field))}))}function P(t,i){return e(this,void 0,void 0,(function*(){return I(yield Promise.all(t.map((t=>e(this,void 0,void 0,(function*(){return(yield w(t.link,i)).map((e=>Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),{gcal:t.gcal,gcal_done:t.gcal_done}),t.color?{color:t.color}:{}),t.tag?{tag:t.tag}:{}),t.ignoredTags?{ignoredTags:t.ignoredTags}:{})))}))))))}))}function U(t,i){return e(this,void 0,void 0,(function*(){const e=yield P(t.filter((e=>e.tag)),i),o=(yield P(t.filter((e=>e.ignoredTags)),i)).filter((t=>{const i=e.map((e=>`${e.tag}${e.id}`));return!1===t.ignoredTags.some((e=>i.includes(`${e}${t.id}`)))})),s=yield P(t.filter((e=>!e.tag&&!e.ignoredTags)),i);return[...e,...o,...s]}))}function G(e){return"object"==typeof e&&null!==e}function x(e,t){if(!G(e))return!1;for(const i in t){if(!(i in e))return r.error(`Missing key: ${i}`),!1;const o=typeof t[i],s=typeof e[i];if(G(t[i])){if(!G(e[i])||!x(e[i],t[i]))return r.error(`Invalid nested structure or type mismatch at key: ${i}`),!1}else if(o!==s)return r.error(`Type mismatch at key: ${i}. Expected ${o}, found ${s}`),!1}return!0}function B(e,t){return x(e,t)}const M={settings:{sync_function:"",timezone_correction:-3,update_frequency:4},options:{daily_summary_email_time:"15:00",email_daily_summary:!1,email_errors:!1,email_new_gcal_sync_release:!1,email_session:!1,maintenance_mode:!1,show_logs:!1}},j={ics_calendars:[]},L={username:"",commits_configs:{commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},issues_configs:{issues_calendar:""},personal_token:""};return class{constructor(e){if(this.configs=e,!function(e){if(!G(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=B(e,M),y in e&&(t.ticktick=B(e[y],j)),k in e&&(t.github=B(e[k],L)),Object.values(t).every((e=>!0===e))}(e))throw new Error("schema invalid");this.is_gas_environment="undefined"!=typeof Calendar,this.today_date=function(e){const t=new Date;return t.setHours(t.getHours()+e),t}(this.configs.settings.timezone_correction).toISOString().split("T")[0],r.info(`${_} is running at version ${h}!`)}parseGcalVersion(e){return Number(e.replace("v","").split(".").join(""))}getLatestGcalSyncRelease(){var e;const t=UrlFetchApp.fetch(`https://api.github.com/repos/${f}/releases?per_page=1`),i=null!==(e=JSON.parse(t.getContentText())[0])&&void 0!==e?e:{};if(0!==Object.keys(i).length)return i}install(){return e(this,void 0,void 0,(function*(){var e,t;o(this.configs.settings.sync_function),e=this.configs.settings.sync_function,t=this.configs.settings.update_frequency,ScriptApp.newTrigger(e).timeBased().everyMinutes(t).create(),Object.keys(n).forEach((e=>{PropertiesService.getScriptProperties().getProperties().includes(e)||i(n[e].key,"")})),r.info(`${_} was set to run function "${this.configs.settings.sync_function}" every ${this.configs.settings.update_frequency} minutes`)}))}uninstall(){return e(this,void 0,void 0,(function*(){o(this.configs.settings.sync_function),Object.keys(n).forEach((e=>{var t;t=n[e].key,PropertiesService.getScriptProperties().deleteProperty(t)})),r.info(`${_} automation was removed from appscript!`)}))}clearTodayEvents(){i(n.today_github_added_commits.key,[]),i(n.today_github_deleted_commits.key,[]),i(n.today_ticktick_added_tasks.key,[]),i(n.today_ticktick_completed_tasks.key,[]),i(n.today_ticktick_updated_tasks.key,[]),r.info(`${this.today_date} stats were reseted!`)}getTodayEvents(){return{addedGithubCommits:t(n.today_github_added_commits.key),addedTicktickTasks:t(n.today_ticktick_added_tasks.key),completedTicktickTasks:t(n.today_ticktick_completed_tasks.key),deletedGithubCommits:t(n.today_github_deleted_commits.key),updatedTicktickTasks:t(n.today_ticktick_updated_tasks.key)}}sync(){return e(this,void 0,void 0,(function*(){const e=this.configs[k],t=this.configs[y];if(!e&&!t)return void r.info("nothing to sync");(e=>{let t=!1;e.forEach((e=>{c(e)||(d(e),r.info(`created google calendar: [${e}]`),t=!0)})),t&&Utilities.sleep(2e3)})([...new Set([].concat(e?[this.configs[k].commits_configs.commits_calendar,this.configs[k].issues_configs.issues_calendar]:[]).concat(t?[...this.configs[y].ics_calendars.map((e=>e.gcal)),...this.configs[y].ics_calendars.map((e=>e.gcal_done))]:[]))]);const i=Object.assign(Object.assign({},t&&(yield $(this.configs))),e&&(yield E(this.configs)));r.info({added_tasks:i.added_tasks.length,completed_tasks:i.completed_tasks.length,updated_tasks:i.updated_tasks.length,commitsAdded:i.commitsAdded.length,commitsDeleted:i.commitsDeleted.length,commitsTrackedToBeAdded:i.commitsTrackedToBeAdded.length,commitsTrackedToBeDelete:i.commitsTrackedToBeDelete.length})}))}}}));
