!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,i,n){return new(i||(i=Promise))((function(o,s){function r(e){try{d(n.next(e))}catch(e){s(e)}}function a(e){try{d(n.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}d((n=n.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const t={name:"gcal-sync",github_repository:"lucasvtiradentes/gcal-sync",version:"1.8.1",build_date_time:"24/01/2024 07:40:47"},i=e=>e.reduce(((e,t)=>e.concat(t)),[]);function n(e,t){const i=e.filter((e=>!t.includes(e))),n=t.filter((t=>!e.includes(t)));return i.concat(n)}const o=(e,t,i)=>e.reduce(((e,n)=>{const o=n[t],s=n[i];return e[o]=s,e}),{}),s={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500,REQUIRED_GITHUB_VALIDATIONS_COUNT:3,IS_TEST_ENVIRONMENT:process.env.NODE_ENV},r=[{key:"today_ticktick_added_tasks",initial_value:[]},{key:"today_ticktick_updated_tasks",initial_value:[]},{key:"today_ticktick_completed_tasks",initial_value:[]},{key:"today_github_added_commits",initial_value:[]},{key:"today_github_deleted_commits",initial_value:[]},{key:"last_released_version_alerted",initial_value:""},{key:"last_released_version_sent_date",initial_value:""},{key:"last_daily_email_sent_date",initial_value:""},{key:"github_commits_tracked_to_be_added",initial_value:[]},{key:"github_commits_tracked_to_be_deleted",initial_value:[]},{key:"github_commit_changes_count",initial_value:""}],a=o(r,"key","initial_value"),d=o(r,"key","key"),c={invalid_configs:"schema invalid",production_only:"This method cannot run in non-production environments",incorrect_ics_calendar:"The link you provided is not a valid ICS calendar: ",abusive_google_calendar_api_use:"Due to the numerous operations in the last few hours, the google api is not responding.",invalid_ics_calendar_link:"You provided an invalid ICS calendar link: ",invalid_github_token:"You provided an invalid github token",invalid_github_username:"You provided an invalid github username"},l="ticktick_sync",m="github_sync";function _(e){return{shouldSyncGithub:e.configs[m].commits_configs.should_sync,shouldSyncTicktick:e.configs[l].should_sync}}function u(e){const t=PropertiesService.getScriptProperties().getProperty(e);let i;try{i=JSON.parse(t)}catch(e){i=t}return i}function p(e,t){const i="string"==typeof t?t:JSON.stringify(t);PropertiesService.getScriptProperties().setProperty(e,i)}function g(e){const t=ScriptApp.getProjectTriggers().find((t=>t.getHandlerFunction()===e));t&&ScriptApp.deleteTrigger(t)}function h(e){MailApp.sendEmail(e)}const f={info:(e,...t)=>{s.IS_TEST_ENVIRONMENT||console.log(e,...t)},error:(e,...t)=>{s.IS_TEST_ENVIRONMENT||console.error(e,...t)}};function y(e){const t=new Date;return t.setHours(t.getHours()+e),t}function b(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}const k={tableStyle:'style="border: 1px solid #333; width: 90%"',tableRowStyle:'style="width: 100%"',tableRowColumnStyle:'style="border: 1px solid #333"'},v=e=>"date"in e?e.date:e.dateTime;function $(e){return e.added_tasks.length+e.updated_tasks.length+e.completed_tasks.length+e.commits_added.length+e.commits_deleted.length}function T(e){let i="";return i=`Hi!<br/><br/>there were ${$(e)} changes made to your google calendar:<br/>\n`,i+=function(e){const t=e.added_tasks,i=e.updated_tasks,n=e.completed_tasks,o=e=>0===e.length?"":`${e.map((e=>{const t=[v(e.start).split("T")[0],e.extendedProperties.private.calendar,`<a href="${e.htmlLink}">${e.summary}</a>`].map((e=>`<td ${k.tableRowColumnStyle}>&nbsp;&nbsp;${e}</td>`)).join("\n");return`<tr ${k.tableRowStyle}">\n${t}\n</tr>`})).join("\n")}`,s=`<tr ${k.tableRowStyle}">\n<th ${k.tableRowColumnStyle} width="80px">date</th><th ${k.tableRowColumnStyle} width="130px">calendar</th><th ${k.tableRowColumnStyle} width="auto">task</th>\n</tr>`;let r="";return r+=t.length>0?`<br/>added ticktick events    : ${t.length}<br/><br/> \n <center>\n<table ${k.tableStyle}>\n${s}\n${o(t)}\n</table>\n</center>\n`:"",r+=i.length>0?`<br/>updated ticktick events  : ${i.length}<br/><br/> \n <center>\n<table ${k.tableStyle}>\n${s}\n${o(i)}\n</table>\n</center>\n`:"",r+=n.length>0?`<br/>completed ticktick events: ${n.length}<br/><br/> \n <center>\n<table ${k.tableStyle}>\n${s}\n${o(n)}\n</table>\n</center>\n`:"",r}(e),i+=function(e){const t=e.commits_added,i=e.commits_deleted,n=e=>0===e.length?"":`${e.map((e=>{const t=[v(e.start).split("T")[0],e.extendedProperties.private.repositoryName,`<a href="${e.htmlLink}">${e.extendedProperties.private.commitMessage}</a>`].map((e=>`<td ${k.tableRowColumnStyle}>&nbsp;&nbsp;${e}</td>`)).join("\n");return`<tr ${k.tableRowStyle}">\n${t}\n</tr>`})).join("\n")}`,o=`<tr ${k.tableRowStyle}">\n<th ${k.tableRowColumnStyle} width="80px">date</th><th ${k.tableRowColumnStyle} width="130px">repository</th><th ${k.tableRowColumnStyle} width="auto">commit</th>\n</tr>`;let s="";return s+=t.length>0?`<br/>added commits events     : ${t.length}<br/><br/> \n <center>\n<table ${k.tableStyle}>\n${o}\n${n(t)}\n</table>\n</center>\n`:"",s+=i.length>0?`<br/>removed commits events   : ${i.length}<br/><br/> \n <center>\n<table ${k.tableStyle}>\n${o}\n${n(i)}\n</table>\n</center>\n`:"",s}(e),i+=`<br/>Regards,<br/>your <a href='https://github.com/${t.github_repository}'>${t.name}</a> bot`,i}function S(i,n){var o;return e(this,void 0,void 0,(function*(){const{shouldSyncGithub:e,shouldSyncTicktick:s}=_(i),r=n.added_tasks.length+n.updated_tasks.length+n.completed_tasks.length;if(s&&r>0){const e=u(d.today_ticktick_added_tasks),t=u(d.today_ticktick_updated_tasks),i=u(d.today_ticktick_completed_tasks);p(d.today_ticktick_added_tasks,[...e,...n.added_tasks]),p(d.today_ticktick_updated_tasks,[...t,...n.updated_tasks]),p(d.today_ticktick_completed_tasks,[...i,...n.completed_tasks]),f.info(`added ${r} new ticktick items to today's stats`)}const a=n.commits_added.length+n.commits_deleted.length;if(e&&a>0){const e=u(d.today_github_added_commits),t=u(d.today_github_deleted_commits);p(d.today_github_added_commits,[...e,...n.commits_added]),p(d.today_github_deleted_commits,[...t,...n.commits_deleted]),f.info(`added ${a} new github items to today's stats`)}const c=r+a,l=i.user_email;if(i.configs.settings.per_sync_emails.email_session&&c>0){h(function(e,i){const n=T(i);return{to:e,name:`${t.name}`,subject:`session report - ${$(i)} modifications - ${t.name}`,htmlBody:n}}(l,n))}const m=function(e,t){const i=y(t),n=60*Number(i.getHours())+Number(i.getMinutes()),o=e.split(":");return n>=60*Number(o[0])+Number(o[1])}(i.configs.settings.per_day_emails.time_to_send,i.configs.settings.timezone_correction),g=i.today_date===u(d.last_daily_email_sent_date);if(m&&i.configs.settings.per_day_emails.email_daily_summary&&!g){p(d.last_daily_email_sent_date,i.today_date);h(function(e,i,n){const o=T(i);return{to:e,name:`${t.name}`,subject:`daily report for ${n} - ${$(i)} modifications - ${t.name}`,htmlBody:o}}(l,{added_tasks:u(d.today_ticktick_added_tasks),updated_tasks:u(d.today_ticktick_updated_tasks),completed_tasks:u(d.today_ticktick_completed_tasks),commits_added:u(d.today_github_added_commits),commits_deleted:u(d.today_github_deleted_commits)},i.today_date)),p(d.today_github_added_commits,[]),p(d.today_github_deleted_commits,[]),p(d.today_ticktick_added_tasks,[]),p(d.today_ticktick_completed_tasks,[]),p(d.today_ticktick_updated_tasks,[]),f.info("today stats were reseted!")}const b=i.today_date===u(d.last_released_version_sent_date),k=e=>Number(e.replace("v","").split(".").join(""));if(m&&i.configs.settings.per_day_emails.email_new_gcal_sync_release&&!b){p(d.last_released_version_sent_date,i.today_date);const e=(()=>{var e;const i=UrlFetchApp.fetch(`https://api.github.com/repos/${t.github_repository}/releases?per_page=1`);return null!==(e=JSON.parse(i.getContentText())[0])&&void 0!==e?e:{tag_name:t.version}})(),n=k(e.tag_name),s=k(t.version),r=null!==(o=u(d.last_released_version_alerted))&&void 0!==o?o:"";if(n>s&&n.toString()!=r){h(function(e,i){const n=`Hi!\n    <br/><br/>\n    a new <a href="https://github.com/${t.github_repository}">${t.name}</a> version is available: <br/>\n    <ul>\n      <li>new version: ${i.tag_name}</li>\n      <li>published at: ${i.published_at}</li>\n      <li>details: <a href="https://github.com/${t.github_repository}/releases">here</a></li>\n    </ul>\n    to update, replace the old version number in your apps scripts <a href="https://script.google.com/">gcal sync project</a> to the new version: ${i.tag_name.replace("v","")}<br/>\n    and also check if you need to change the setup code in the <a href='https://github.com/${t.github_repository}#installation'>installation section</a>.\n    <br /><br />\n    Regards,\n    your <a href='https://github.com/${t.github_repository}'>${t.name}</a> bot\n  `;return{to:e,name:`${t.name}`,subject:`new version [${i.tag_name}] was released - ${t.name}`,htmlBody:n}}(l,e)),p(d.last_released_version_alerted,n.toString())}}f.info({sessionData:n})}))}function w(t,i){var n;return e(this,void 0,void 0,(function*(){const e=[];let o=1,s=!1;for(;!1===s;){const r=`https://api.github.com/search/commits?q=author:${t}&page=${o}&sort=committer-date&per_page=100`;let a;a=""!==i?UrlFetchApp.fetch(r,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${i}`}}):UrlFetchApp.fetch(r,{muteHttpExceptions:!0});const d=null!==(n=JSON.parse(a.getContentText()))&&void 0!==n?n:{};if(200!==a.getResponseCode()){if("Validation Failed"===d.message)throw new Error(c.invalid_github_username);if("Bad credentials"===d.message)throw new Error(c.invalid_github_token);throw new Error(d.message)}const l=d.items;if(0===l.length){s=!0;break}if(e.push(...l),o++,o>10){s=!0;break}}return e.map((e=>({commitDate:e.commit.author.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}function I(e){const t={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=e;for(const[e,n]of Object.entries(t))i=i.replace(e,n);return i}const E=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},C=e=>E().find((t=>t.summary===e)),D=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const i=t.newCalendar();i.summary=e,i.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(i)};function N(e){return E().find((t=>t.summary===e))}function R(e){return e.reduce(((e,t)=>{const i=function(e){return Calendar.Events.list(e.id,{maxResults:s.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,i,n,o,s;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(i=e.attendees)&&void 0!==i?i:[],reminders:null!==(n=e.reminders)&&void 0!==n?n:{},visibility:null!==(o=e.visibility)&&void 0!==o?o:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(s=e.extendedProperties)&&void 0!==s?s:{}}}(e)))}(N(t));return[...e,...i]}),[])}function x(e,t){return Calendar.Events.insert(t,e.id)}function A(e,t,i){O(e,i),Utilities.sleep(2e3);return x(t,i)}function O(e,t){Calendar.Events.remove(e.id,t.id)}function P(){p("github_commit_changes_count","0"),p("github_commits_tracked_to_be_added",[]),p("github_commits_tracked_to_be_deleted",[])}function M(t){return e(this,void 0,void 0,(function*(){const i={githubCommits:yield w(t[m].username,t[m].personal_token),githubGcalCommits:R([t[m].commits_configs.commits_calendar])},o=u("github_commit_changes_count"),r=Number(o)+1;null===o&&P(),p("github_commit_changes_count",r.toString()),1===r?f.info(`checking commit changes: ${r}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):r>1&&r<s.REQUIRED_GITHUB_VALIDATIONS_COUNT?f.info(`confirming commit changes: ${r}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):r===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&f.info(`making commit changes if succeed: ${r}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`);const a=N(t[m].commits_configs.commits_calendar),d=i.githubCommits.sort(((e,t)=>Number(new Date(t.commitDate))-Number(new Date(e.commitDate)))).filter((e=>e.repository.includes(t[m].username))).filter((e=>!1===t[m].commits_configs.ignored_repos.includes(e.repositoryName))),c=Object.assign(Object.assign({},yield function({onlyCommitsFromValidRepositories:t,currentGithubSyncIndex:i,githubCalendar:o,githubGcalCommits:r,parseCommitEmojis:a}){return e(this,void 0,void 0,(function*(){const e={commits_tracked_to_be_added:[],commits_added:[]};for(const i of t){if(!r.filter((e=>e.extendedProperties.private.repository===i.repository)).find((e=>e.extendedProperties.private.commitDate===i.commitDate&&I(e.extendedProperties.private.commitMessage)===I(i.commitMessage)))){const t=a?I(i.commitMessage):i.commitMessage,n={private:{commitMessage:t,commitDate:i.commitDate,repository:i.repository,repositoryName:i.repositoryName,commitId:i.commitId}},o={summary:`${i.repositoryName} - ${t}`,description:`repository: https://github.com/${i.repository}\ncommit: ${i.commitUrl}`,start:{dateTime:i.commitDate},end:{dateTime:i.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:n};e.commits_tracked_to_be_added.push(o)}}if(1===i)return p("github_commits_tracked_to_be_added",e.commits_tracked_to_be_added.map((e=>e))),e;if(n(u("github_commits_tracked_to_be_added").map((e=>e.extendedProperties.private.commitId)),e.commits_tracked_to_be_added.map((e=>e.extendedProperties.private.commitId))).length>0)return f.info("reset github commit properties due differences in added commits"),P(),e;if(i===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commits_tracked_to_be_added.length>0){f.info(`adding ${e.commits_tracked_to_be_added.length} commits to gcal`);for(let t=0;t<e.commits_tracked_to_be_added.length;t++)try{const i=e.commits_tracked_to_be_added[t],n=x(o,i);e.commits_added.push(i),f.info(`${t+1}/${e.commits_tracked_to_be_added.length} add new commit to gcal: ${i.extendedProperties.private.commitDate} - ${n.extendedProperties.private.repositoryName} - ${n.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{P()}}return e}))}({currentGithubSyncIndex:r,githubCalendar:a,githubGcalCommits:i.githubGcalCommits,onlyCommitsFromValidRepositories:d,parseCommitEmojis:t[m].commits_configs.parse_commit_emojis})),yield function({githubGcalCommits:t,githubCalendar:i,currentGithubSyncIndex:o,onlyCommitsFromValidRepositories:r}){return e(this,void 0,void 0,(function*(){const e={commits_deleted:[],commits_tracked_to_be_deleted:[]};if(t.forEach((t=>{const i=t.extendedProperties.private;r.filter((e=>e.repository===i.repository)).find((e=>e.commitDate===i.commitDate&&I(e.commitMessage)===I(i.commitMessage)))||e.commits_tracked_to_be_deleted.push(t)})),1===o)return p("github_commits_tracked_to_be_deleted",e.commits_tracked_to_be_deleted),e;if(n(u("github_commits_tracked_to_be_deleted").map((e=>e.extendedProperties.private.commitId)),e.commits_tracked_to_be_deleted.map((e=>e.extendedProperties.private.commitId))).length>0)return f.info("reset github commit properties due differences in deleted commits"),P(),e;if(o===s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&e.commits_tracked_to_be_deleted.length>0){f.info(`deleting ${e.commits_tracked_to_be_deleted.length} commits on gcal`);for(let t=0;t<e.commits_tracked_to_be_deleted.length;t++)try{const n=e.commits_tracked_to_be_deleted[t];O(i,n),e.commits_deleted.push(n),f.info(`${t+1}/${e.commits_tracked_to_be_deleted.length} deleted commit on gcal: ${n.extendedProperties.private.commitDate} - ${n.extendedProperties.private.repositoryName} - ${n.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{P()}}return e}))}({currentGithubSyncIndex:r,githubCalendar:a,githubGcalCommits:i.githubGcalCommits,onlyCommitsFromValidRepositories:d}));return 0===c.commits_tracked_to_be_added.length&&0===c.commits_tracked_to_be_deleted.length&&(f.info("reset github commit properties due found no commits tracked"),P()),c}))}const U=(e,t,i)=>{const n=e.slice(e.search(t)).replace(t,"");return n.slice(0,n.search(i))},G=(t,i)=>e(void 0,void 0,void 0,(function*(){const e=t.replace("webcal://","https://"),n=UrlFetchApp.fetch(e,{validateHttpsCertificates:!1,muteHttpExceptions:!0}),o=n.getContentText()||"";if(200!==n.getResponseCode())throw new Error(c.invalid_ics_calendar_link+e);if(-1===o.search("BEGIN:VCALENDAR"))throw new Error(c.incorrect_ics_calendar);const s=o.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)),r=(o.search("SUMMARY:No task.")>0?[]:s.reduce(((e,t)=>{const i=t.split("BEGIN:VALARM\r\n");return[...e,{CALNAME:U(o,"X-WR-CALNAME:","\r\n"),DSTAMP:U(t,"DTSTAMP:","\r\n"),DTSTART:U(t,"DTSTART;","\r\n"),DTEND:U(t,"DTEND;","\r\n"),SUMMARY:U(t,"SUMMARY:","\r\n"),UID:U(t,"UID:","\r\n"),DESCRIPTION:U(t,"DESCRIPTION:","\r\n"),SEQUENCE:U(t,"SEQUENCE:","\r\n"),TZID:U(t,"TZID:","\r\n"),ALARM_TRIGGER:1===i.length?"":U(i[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===i.length?"":U(i[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===i.length?"":U(i[1],"DESCRIPTION:","\r\n")}]}),[])).map((e=>{const t=function(e,t,i,n){let o=e,s=t;if(o=o.slice(o.search(":")+1),s=s.slice(s.search(":")+1),""===s){const e=b(o),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),s={date:t.toISOString().split("T")[0]},o={date:`${e.year}-${e.month}-${e.day}`}}else{const e=b(o),t=b(s),r=(e=>0===e?"":`${e<0?"-":"+"}${String(Math.abs(e)).padStart(2,"0")}:00`)(n);o={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}${r}`,timeZone:i},s={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}${r}`,timeZone:i}}return{finalDtstart:o,finalDtend:s}}(e.DTSTART,e.DTEND,e.TZID,i);return{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:t.finalDtstart,end:t.finalDtend}}));return r}));function j(t){return e(this,void 0,void 0,(function*(){const i=t[l].ics_calendars,n={ticktickTasks:yield F(i,t.settings.timezone_correction),ticktickGcalTasks:R([...new Set(i.map((e=>e.gcal)))])};return Object.assign(Object.assign({},yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={added_tasks:[],updated_tasks:[]};for(const n of i){const i=t.find((e=>e.extendedProperties.private.tickTaskId===n.id)),o=N(n.gcal);if(i){const t=o.summary!==i.extendedProperties.private.calendar,s=yield H(n,i),r=N(n.gcal_done);if(t){const t=A(o,r,Object.assign(Object.assign({},i),{colorId:void 0}));e.updated_tasks.push(t)}else if(s.length>0){const t=A(o,r,Object.assign(Object.assign({},i),{colorId:void 0}));e.updated_tasks.push(t)}}else{const t=yield V(o,n);e.added_tasks.push(t)}}return e}))}(n)),yield function({ticktickGcalTasks:t,ticktickTasks:i}){return e(this,void 0,void 0,(function*(){const e={completed_tasks:[]},n=t.filter((e=>{var t,i;return null===(i=null===(t=e.extendedProperties)||void 0===t?void 0:t.private)||void 0===i?void 0:i.tickTaskId}));for(const t of n){if(!i.map((e=>e.id)).includes(t.extendedProperties.private.tickTaskId)){const i=A(N(t.extendedProperties.private.calendar),N(t.extendedProperties.private.completedCalendar),Object.assign(Object.assign({},t),{colorId:void 0}));e.completed_tasks.push(i)}}return e}))}(n))}))}const L=e=>{let t=e;return t=t.replace(/\\,/g,","),t=t.replace(/\\;/g,";"),t=t.replace(/\\"/g,'"'),t=t.replace(/\\\\/g,"\\"),t};function V(t,i){return e(this,void 0,void 0,(function*(){const n=yield function(t){return e(this,void 0,void 0,(function*(){const e={private:{calendar:t.gcal,completedCalendar:t.gcal_done,tickTaskId:t.id}},i=(null==t?void 0:t.color)?{colorId:t.color.toString()}:{};var n;return Object.assign({summary:L(t.name),description:(n=t,`task: https://ticktick.com/webapp/#q/all/tasks/${n.id.split("@")[0]}${n.description?"\n\n"+n.description.replace(/\\n/g,"\n"):""}`),start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:e},i)}))}(i);try{return x(t,n)}catch(e){throw e.message.search("API call to calendar.events.insert failed with error: Required")>-1?new Error(c.abusive_google_calendar_api_use):new Error(e.message)}}))}function H(t,i){return e(this,void 0,void 0,(function*(){return[{hasChanged:L(t.name)!==i.summary,field:"name"},{hasChanged:Object.keys(t.start).length!==Object.keys(i.start).length,field:"date format"},{hasChanged:t.start.date!==i.start.date||t.start.dateTime!==i.start.dateTime,field:"initial date"},{hasChanged:t.end.date!==i.end.date||t.end.dateTime!==i.end.dateTime,field:"final date"},{hasChanged:(()=>{let e=!1;return e=void 0===(null==t?void 0:t.color)?void 0!==i.colorId:t.color.toString()!==i.colorId,e})(),field:"color"}].filter((e=>e.hasChanged)).map((e=>e.field))}))}function B(t,n){return e(this,void 0,void 0,(function*(){return i(yield Promise.all(t.map((t=>e(this,void 0,void 0,(function*(){return(yield G(t.link,n)).map((e=>Object.assign(Object.assign({},e),t)))}))))))}))}function F(t,i){return e(this,void 0,void 0,(function*(){const e=yield B(t.filter((e=>e.tag)),i),n=(yield B(t.filter((e=>e.ignoredTags)),i)).filter((t=>{const i=e.map((e=>`${e.tag}${e.id}`));return!1===t.ignoredTags.some((e=>i.includes(`${e}${t.id}`)))})),o=yield B(t.filter((e=>!e.tag&&!e.ignoredTags)),i);return[...e,...n,...o]}))}function z(e){return"object"==typeof e&&null!==e}function Q(e,t){if(!z(e))return!1;for(const i in t){if(!(i in e))return f.error(`Missing key: ${i}`),!1;const n=typeof t[i],o=typeof e[i];if(z(t[i])){if(!z(e[i])||!Q(e[i],t[i]))return f.error(`Invalid nested structure or type mismatch at key: ${i}`),!1}else if(n!==o)return f.error(`Type mismatch at key: ${i}. Expected ${n}, found ${o}`),!1}return!0}function Y(e,t){return Q(e,t)}const Z={settings:{sync_function:"",timezone_correction:-3,update_frequency:4,per_day_emails:{time_to_send:"15:00",email_new_gcal_sync_release:!1,email_daily_summary:!1},per_sync_emails:{email_errors:!1,email_session:!1}}},q={should_sync:!1,ics_calendars:[]},J={username:"",commits_configs:{should_sync:!1,commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},personal_token:""};return class{constructor(e){if(!function(e){if(!z(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=Y(e,Z),t.ticktick=Y(e[l],q),t.github=Y(e[m],J),Object.values(t).every((e=>!0===e))}(e))throw new Error(c.invalid_configs);if("undefined"==typeof Calendar)throw new Error(c.production_only);this.extended_configs.user_email=Session.getActiveUser().getEmail(),this.extended_configs.today_date=y(e.settings.timezone_correction).toISOString().split("T")[0],f.info(`${t.name} is running at version ${t.version}!`)}createMissingGASProperties(){const e=PropertiesService.getScriptProperties().getProperties();Object.keys(d).forEach((t=>{Object.keys(e).includes(t)||p(d[t],a[t])}))}createMissingGcalCalendars(){const{shouldSyncGithub:e,shouldSyncTicktick:t}=_(this.extended_configs);(e=>{let t=!1;e.forEach((e=>{C(e)||(D(e),f.info(`created google calendar: [${e}]`),t=!0)})),t&&Utilities.sleep(2e3)})([...new Set([].concat(e?[this.extended_configs.configs[m].commits_configs.commits_calendar]:[]).concat(t?[...this.extended_configs.configs[l].ics_calendars.map((e=>e.gcal)),...this.extended_configs.configs[l].ics_calendars.map((e=>e.gcal_done))]:[]))])}install(){return e(this,void 0,void 0,(function*(){var e,i;g(this.extended_configs.configs.settings.sync_function),e=this.extended_configs.configs.settings.sync_function,i=this.extended_configs.configs.settings.update_frequency,ScriptApp.newTrigger(e).timeBased().everyMinutes(i).create(),this.createMissingGASProperties(),f.info(`${t.name} was set to run function "${this.extended_configs.configs.settings.sync_function}" every ${this.extended_configs.configs.settings.update_frequency} minutes`)}))}uninstall(){return e(this,void 0,void 0,(function*(){g(this.extended_configs.configs.settings.sync_function),Object.keys(d).forEach((e=>{var t;t=d[e],PropertiesService.getScriptProperties().deleteProperty(t)})),f.info(`${t.name} automation was removed from appscript!`)}))}sync(){return e(this,void 0,void 0,(function*(){const{shouldSyncGithub:e,shouldSyncTicktick:t}=_(this.extended_configs);if(!e&&!t)return void f.info("nothing to sync");this.createMissingGcalCalendars(),this.createMissingGASProperties();const i=yield j(this.extended_configs.configs),n=yield M(this.extended_configs.configs),o=Object.assign(Object.assign(Object.assign({},{added_tasks:[],updated_tasks:[],completed_tasks:[],commits_added:[],commits_deleted:[]}),t&&i),e&&n);yield S(this.extended_configs,o)}))}}}));
