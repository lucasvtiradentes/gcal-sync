!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const t="You provided an invalid ICS calendar link: ",n="You provided an invalid github token",i="You provided an invalid github username",r="Due to the numerous operations in the last few hours, the google api is not responding.";const s={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500},o={info:(e,...t)=>{console.log(e,...t)},error:(e,...t)=>{console.error(e,...t)}};const a=e=>{let t=!1;var n;e.forEach((e=>{d(e)||(l(e),o.info(`created google calendar: [${e}]`),t=!0)})),t&&(n=2e3,new Promise((e=>setTimeout(e,n))))},c=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},d=e=>c().find((t=>t.summary===e)),l=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const n=t.newCalendar();n.summary=e,n.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(n)};function u(e){return c().find((t=>t.summary===e))}function m(e){return e.reduce(((e,t)=>{const n=function(e){return Calendar.Events.list(e.id,{maxResults:s.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,n,i,r,s;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(n=e.attendees)&&void 0!==n?n:[],reminders:null!==(i=e.reminders)&&void 0!==i?i:{},visibility:null!==(r=e.visibility)&&void 0!==r?r:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(s=e.extendedProperties)&&void 0!==s?s:{}}}(e)))}(u(t));return[...e,...n]}),[])}function g(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}const f=(n,i)=>e(void 0,void 0,void 0,(function*(){const e=n.replace("webcal://","https://"),r=UrlFetchApp.fetch(e,{validateHttpsCertificates:!1,muteHttpExceptions:!0}),s=r.getContentText()||"";if(200!==r.getResponseCode())throw new Error(t+e);if(-1===s.search("BEGIN:VCALENDAR"))throw new Error("RESPOSTA INVALIDA PRA UM ICS");const o=s.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)),a=(s.search("SUMMARY:No task.")>0?[]:o.reduce(((e,t)=>{const n=t.split("BEGIN:VALARM\r\n");return[...e,{CALNAME:h(s,"X-WR-CALNAME:","\r\n"),DSTAMP:h(t,"DTSTAMP:","\r\n"),DTSTART:h(t,"DTSTART;","\r\n"),DTEND:h(t,"DTEND;","\r\n"),SUMMARY:h(t,"SUMMARY:","\r\n"),UID:h(t,"UID:","\r\n"),DESCRIPTION:h(t,"DESCRIPTION:","\r\n"),SEQUENCE:h(t,"SEQUENCE:","\r\n"),TZID:h(t,"TZID:","\r\n"),ALARM_TRIGGER:1===n.length?"":h(n[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===n.length?"":h(n[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===n.length?"":h(n[1],"DESCRIPTION:","\r\n")}]}),[])).map((e=>{const t=function(e,t,n,i){let r=e,s=t;if(r=r.slice(r.search(":")+1),s=s.slice(s.search(":")+1),""===s){const e=g(r),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),s={date:t.toISOString().split("T")[0]},r={date:`${e.year}-${e.month}-${e.day}`}}else{const e=g(r),t=g(s),o=(e=>0===e?"":`${e<0?"-":"+"}${String(Math.abs(e)).padStart(2,"0")}:00`)(i);r={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}${o}`,timeZone:n},s={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}${o}`,timeZone:n}}return{finalDtstart:r,finalDtend:s}}(e.DTSTART,e.DTEND,e.TZID,i);return{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:t.finalDtstart,end:t.finalDtend}}));return a})),h=(e,t,n)=>{const i=e.slice(e.search(t)).replace(t,"");return i.slice(0,i.search(n))};const p=e=>{let t=e;return t=t.replace(/\\,/g,","),t=t.replace(/\\;/g,";"),t=t.replace(/\\"/g,'"'),t=t.replace(/\\\\/g,"\\"),t};function y(t,n){return e(this,void 0,void 0,(function*(){const i=yield function(t){return e(this,void 0,void 0,(function*(){const e={private:{calendar:t.gcal,completedCalendar:t.gcal_done,tickTaskId:t.id}},n=(null==t?void 0:t.color)?{colorId:t.color.toString()}:{};var i;return Object.assign({summary:p(t.name),description:(i=t,`task: https://ticktick.com/webapp/#q/all/tasks/${i.id.split("@")[0]}${i.description?"\n\n"+i.description.replace(/\\n/g,"\n"):""}`),start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:e},n)}))}(n);try{!function(e,t){try{return Calendar.Events.insert(t,e.id)}catch(e){return this.logger(`error when adding event [${t.summary}] to gcal: ${e.message}`),t}}(t,i)}catch(e){throw e.message.search("API call to calendar.events.insert failed with error: Required")>-1?new Error(r):new Error(e.message)}}))}const T="gcal-sync",k="2.0.0",v="ticktick_sync",_="github_sync";function E(e){return"object"==typeof e&&null!==e}function I(e,t){if(!E(e))return!1;for(const n in t){if(!(n in e))return o.error(`Missing key: ${n}`),!1;const i=typeof t[n],r=typeof e[n];if(E(t[n])){if(!E(e[n])||!I(e[n],t[n]))return o.error(`Invalid nested structure or type mismatch at key: ${n}`),!1}else if(i!==r)return o.error(`Type mismatch at key: ${n}. Expected ${i}, found ${r}`),!1}return!0}function A(e,t){return I(e,t)}const $={settings:{sync_function:"",timezone_correction:-3,update_frequency:4},options:{daily_summary_email_time:"15:00",email_daily_summary:!1,email_errors:!1,email_new_gcal_sync_release:!1,email_session:!1,maintenance_mode:!1,show_logs:!1}},S={ics_calendars:[]},C={username:"",commits_configs:{commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},issues_configs:{issues_calendar:""},personal_token:""};return class{constructor(e){if(this.configs=e,this.isGASEnvironment="undefined"!=typeof Calendar,!function(e){if(!E(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=A(e,$),v in e&&(t.ticktick=A(e[v],S)),_ in e&&(t.github=A(e[_],C)),Object.values(t).every((e=>!0===e))}(e))throw new Error("schema invalid");this.today_date=function(e){const t=new Date;return t.setHours(t.getHours()+e),t}(this.configs.settings.timezone_correction).toISOString().split("T")[0],o.info(`${T} is running at version ${k}!`)}sync(){return e(this,void 0,void 0,(function*(){const e=this.configs[_],t=this.configs[v];if(!e&&!t)return void o.info("nothing to sync");const n=[...new Set([].concat(e?[this.configs[_].commits_configs.commits_calendar,this.configs[_].issues_configs.issues_calendar]:[]).concat(t?[...this.configs[v].ics_calendars.map((e=>e.gcal)),...this.configs[v].ics_calendars.map((e=>e.gcal_done))]:[]))];a(n),t&&(yield this.syncTicktick()),e&&(yield this.syncGithub())}))}syncTicktick(){return e(this,void 0,void 0,(function*(){const e={ticktickTasks:[],ticktickGcalTasks:[]},t=this.configs[v].ics_calendars;e.ticktickGcalTasks=m([...new Set(t.map((e=>e.gcal)))]);const n=yield this.getTicktickTasks(t.filter((e=>e.tag))),i=(yield this.getTicktickTasks(t.filter((e=>e.ignoredTags)))).filter((e=>{const t=n.map((e=>`${e.tag}${e.id}`));return!1===e.ignoredTags.some((n=>t.includes(`${n}${e.id}`)))})),r=yield this.getTicktickTasks(t.filter((e=>!e.tag&&!e.ignoredTags)));e.ticktickTasks=[...n,...i,...r];for(const t of e.ticktickTasks){const n=e.ticktickGcalTasks.find((e=>e.extendedProperties.private.tickTaskId===t.id)),i=u(t.gcal);let r="";if(n){const e=i.summary!==n.extendedProperties.private.calendar,s=yield this.checkIfTicktickTaskInfoWasChanged(t,n);r=e?"moved to another google calendar":s.length>0?`gcal event was updated due changes on ticktick task: ${s.join(", ")}`:"nothing, all synced"}else yield y(i,t),r="added to gcal";o.info(`${t.name} - ${r}`)}}))}checkIfTicktickTaskInfoWasChanged(t,n){return e(this,void 0,void 0,(function*(){return[{hasChanged:p(t.name)!==n.summary,field:"name"},{hasChanged:Object.keys(t.start).length!==Object.keys(n.start).length,field:"date format"},{hasChanged:t.start.date!==n.start.date||t.start.dateTime!==n.start.dateTime,field:"initial date"},{hasChanged:t.end.date!==n.end.date||t.end.dateTime!==n.end.dateTime,field:"final date"},{hasChanged:(()=>{let e=!1;return e=void 0===(null==t?void 0:t.color)?void 0!==n.colorId:t.color.toString()!==n.colorId,e})(),field:"color"}].filter((e=>e.hasChanged)).map((e=>e.field))}))}getTicktickTasks(t){return e(this,void 0,void 0,(function*(){return(yield Promise.all(t.map((t=>e(this,void 0,void 0,(function*(){return(yield f(t.link,this.configs.settings.timezone_correction)).map((e=>Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),{gcal:t.gcal,gcal_done:t.gcal_done}),t.color?{color:t.color}:{}),t.tag?{tag:t.tag}:{}),t.ignoredTags?{ignoredTags:t.ignoredTags}:{})))})))))).reduce(((e,t)=>e.concat(t)),[])}))}syncGithub(){return e(this,void 0,void 0,(function*(){this.configs[_].commits_configs&&(yield function(t,r){var s;return e(this,void 0,void 0,(function*(){const e=[];let o=1,a=!1;for(;!1===a;){const c=`https://api.github.com/search/commits?q=author:${t}&page=${o}&sort=committer-date&per_page=100`;let d;d=""!==r?UrlFetchApp.fetch(c,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${r}`}}):UrlFetchApp.fetch(c,{muteHttpExceptions:!0});const l=null!==(s=JSON.parse(d.getContentText()))&&void 0!==s?s:{};if(200!==d.getResponseCode()){if("Validation Failed"===l.message)throw new Error(i);if("Bad credentials"===l.message)throw new Error(n);throw new Error(l.message)}const u=l.items;if(0===u.length){a=!0;break}if(e.push(...u),o++,o>10){a=!0;break}}return e.map((e=>({commitDate:e.commit.author.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}(this.configs[_].username,this.configs[_].personal_token))}))}}}));
