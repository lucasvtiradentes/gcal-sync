!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).GcalSync=t()}(this,(function(){"use strict";function e(e,t,i,o){return new(i||(i=Promise))((function(s,r){function n(e){try{a(o.next(e))}catch(e){r(e)}}function c(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,c)}a((o=o.apply(e,t||[])).next())}))}function t(e){const t=PropertiesService.getScriptProperties().getProperty(e);let i;try{i=JSON.parse(t)}catch(e){i=t}return i}function i(e,t){const i="string"==typeof t?t:JSON.stringify(t);PropertiesService.getScriptProperties().setProperty(e,i)}function o(e){const t=ScriptApp.getProjectTriggers().find((t=>t.getHandlerFunction()===e));t&&ScriptApp.deleteTrigger(t)}"function"==typeof SuppressedError&&SuppressedError;const s={DEBUG_MODE:!0,MAX_GCAL_TASKS:2500,REQUIRED_GITHUB_VALIDATIONS_COUNT:3,EVENTS_DIVIDER:" | "},r={today_ticktick_added_tasks:{key:"today_ticktick_added_tasks",schema:{}},today_ticktick_updated_tasks:{key:"today_ticktick_updated_tasks",schema:{}},today_ticktick_completed_tasks:{key:"today_ticktick_completed_tasks",schema:{}},today_github_added_commits:{key:"today_github_added_commits",schema:{}},today_github_deleted_commits:{key:"today_github_deleted_commits",schema:{}},last_released_version_alerted:{key:"last_released_version_alerted",schema:{}},last_daily_email_sent_date:{key:"last_daily_email_sent_date",schema:{}},github_last_added_commits:{key:"github_last_added_commits",schema:{}},github_last_deleted_commits:{key:"github_last_deleted_commits",schema:{}},github_commit_changes_count:{key:"github_commit_changes_count",schema:{}}},n={info:(e,...t)=>{console.log(e,...t)},error:(e,...t)=>{console.error(e,...t)}},c=()=>{var e;return null!==(e=Calendar.CalendarList.list({showHidden:!0}).items)&&void 0!==e?e:[]},a=e=>c().find((t=>t.summary===e)),d=e=>{const t=Calendar;if(t.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole)).map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const i=t.newCalendar();i.summary=e,i.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(i)};function m(e){return c().find((t=>t.summary===e))}function l(e){return e.reduce(((e,t)=>{const i=function(e){return Calendar.Events.list(e.id,{maxResults:s.MAX_GCAL_TASKS}).items.map((e=>function(e){var t,i,o,s,r;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(i=e.attendees)&&void 0!==i?i:[],reminders:null!==(o=e.reminders)&&void 0!==o?o:{},visibility:null!==(s=e.visibility)&&void 0!==s?s:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,colorId:e.colorId,extendedProperties:null!==(r=e.extendedProperties)&&void 0!==r?r:{}}}(e)))}(m(t));return[...e,...i]}),[])}function u(e,t){try{return Calendar.Events.insert(t,e.id)}catch(e){return n.info(`error when adding event [${t.summary}] to gcal: ${e.message}`),t}}function _(e,t){try{Calendar.Events.remove(e.id,t.id)}catch(e){n.info(`error when deleting event [${t.summary}] to gcal: ${e.message}`)}}const p="gcal-sync",g="2.0.0",h="lucasvtiradentes/gcal-sync",f="ticktick_sync",y="github_sync",k={productionOnly:"This method cannot run in non-production environments",incorrectIcsCalendar:"The link you provided is not a valid ICS calendar: ",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: ",invalidGithubToken:"You provided an invalid github token",invalidGithubUsername:"You provided an invalid github username",abusiveGoogleCalendarApiUse:"Due to the numerous operations in the last few hours, the google api is not responding."};function b(t,i){var o;return e(this,void 0,void 0,(function*(){const e=[];let s=1,r=!1;for(;!1===r;){const n=`https://api.github.com/search/commits?q=author:${t}&page=${s}&sort=committer-date&per_page=100`;let c;c=""!==i?UrlFetchApp.fetch(n,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${i}`}}):UrlFetchApp.fetch(n,{muteHttpExceptions:!0});const a=null!==(o=JSON.parse(c.getContentText()))&&void 0!==o?o:{};if(200!==c.getResponseCode()){if("Validation Failed"===a.message)throw new Error(k.invalidGithubUsername);if("Bad credentials"===a.message)throw new Error(k.invalidGithubToken);throw new Error(a.message)}const d=a.items;if(0===d.length){r=!0;break}if(e.push(...d),s++,s>10){r=!0;break}}return e.map((e=>({commitDate:e.commit.author.date,commitMessage:e.commit.message.split("\n")[0],commitId:e.html_url.split("commit/")[1],commitUrl:e.html_url,repository:e.repository.full_name,repositoryId:e.repository.id,repositoryName:e.repository.name,repositoryOwner:e.repository.owner.login,repositoryDescription:e.repository.description,isRepositoryPrivate:e.repository.private,isRepositoryFork:e.repository.fork})))}))}function v(e){const t={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=e;for(const[e,o]of Object.entries(t))i=i.replace(e,o);return i}function T(e,t){const i=e.filter((e=>!t.includes(e))),o=t.filter((t=>!e.includes(t)));return i.concat(o)}function w(){i("github_commit_changes_count","0"),i("github_last_added_commits",[]),i("github_last_deleted_commits",[])}function C(o){return e(this,void 0,void 0,(function*(){const r={githubCommits:yield b(o[y].username,o[y].personal_token),githubGcalCommits:l([o[y].commits_configs.commits_calendar])},c=t("github_commit_changes_count"),a=Number(c)+1;null===c&&w(),i("github_commit_changes_count",a.toString()),1===a?n.info(`checking commit changes: ${a}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`):a>1&&a<s.REQUIRED_GITHUB_VALIDATIONS_COUNT&&n.info(`confirming commit changes: ${a}/${s.REQUIRED_GITHUB_VALIDATIONS_COUNT}`);const d=m(o[y].commits_configs.commits_calendar),p=r.githubCommits.sort(((e,t)=>Number(new Date(t.commitDate))-Number(new Date(e.commitDate)))).filter((e=>e.repository.includes(o[y].username))).filter((e=>!1===o[y].commits_configs.ignored_repos.includes(e.repositoryName))),g=Object.assign(Object.assign({},yield function({onlyCommitsFromValidRepositories:o,currentGithubSyncIndex:r,githubCalendar:c,githubGcalCommits:a,parseCommitEmojis:d}){return e(this,void 0,void 0,(function*(){const e={commitsTrackedToBeAdded:[],commitsAdded:[]};for(const t of o){if(!a.filter((e=>e.extendedProperties.private.repository===t.repository)).find((e=>e.extendedProperties.private.commitDate===t.commitDate&&v(e.extendedProperties.private.commitMessage)===v(t.commitMessage)))){const i=d?v(t.commitMessage):t.commitMessage,o={private:{commitMessage:i,commitDate:t.commitDate,repository:t.repository,repositoryName:t.repositoryName,commitId:t.commitId}},s={summary:`${t.repositoryName} - ${i}`,description:`repository: https://github.com/${t.repository}\ncommit: ${t.commitUrl}`,start:{dateTime:t.commitDate},end:{dateTime:t.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:o};e.commitsTrackedToBeAdded.push({commit:t,gcalEvent:s})}}if(1===r)return i("github_last_added_commits",e.commitsTrackedToBeAdded.map((e=>e.commit))),e;if(T(t("github_last_added_commits").map((e=>e.commitId)),e.commitsTrackedToBeAdded.map((e=>e.commit.commitId))).length>0)return n.info("reset github commit properties due differences in added commits"),w(),e;if(r===s.REQUIRED_GITHUB_VALIDATIONS_COUNT){n.info("add commits to gcal:");for(let t=0;t<e.commitsTrackedToBeAdded.length;t++)try{const i=e.commitsTrackedToBeAdded[t],o=u(c,i.gcalEvent);e.commitsAdded.push(i.commit),n.info(`${t+1}/${e.commitsTrackedToBeAdded.length} add new commit to gcal: ${i.commit.commitDate} - ${o.extendedProperties.private.repositoryName} - ${o.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{w()}}}))}({currentGithubSyncIndex:a,githubCalendar:d,githubGcalCommits:r.githubGcalCommits,onlyCommitsFromValidRepositories:p,parseCommitEmojis:o[y].commits_configs.parse_commit_emojis})),yield function({githubGcalCommits:o,githubCalendar:r,currentGithubSyncIndex:c,onlyCommitsFromValidRepositories:a}){return e(this,void 0,void 0,(function*(){const e={commitsDeleted:[],commitsTrackedToBeDelete:[]};if(o.forEach((t=>{const i=t.extendedProperties.private;a.filter((e=>e.repository===i.repository)).find((e=>e.commitDate===i.commitDate&&v(e.commitMessage)===v(i.commitMessage)))||(e.commitsTrackedToBeDelete.push(t),n.info(`detect a commit to be deleted in gcal: ${i.repositoryName} - ${i.commitMessage}`))})),1===c)return i("github_last_deleted_commits",e.commitsTrackedToBeDelete),e;if(T(t("github_last_deleted_commits").map((e=>e.extendedProperties.private.repository)),e.commitsTrackedToBeDelete.map((e=>e.extendedProperties.private.commitId))).length>0)return n.info("reset github commit properties due differences in deleted commits"),w(),e;if(c===s.REQUIRED_GITHUB_VALIDATIONS_COUNT){n.info("delete commits on gcal:");for(let t=0;t<e.commitsTrackedToBeDelete.length;t++)try{const i=e.commitsTrackedToBeDelete[t];_(r,i),e.commitsDeleted.push(i),n.info(`${t+1}/${e.commitsTrackedToBeDelete.length} deleted commit on gcal: ${i.extendedProperties.private.commitDate} - ${i.extendedProperties.private.repositoryName} - ${i.extendedProperties.private.commitMessage}`)}catch(e){throw new Error(e.message)}finally{w()}}return e}))}({currentGithubSyncIndex:a,githubCalendar:d,githubGcalCommits:r.githubGcalCommits,onlyCommitsFromValidRepositories:p}));return 0===g.commitsTrackedToBeAdded.length&&0===g.commitsTrackedToBeDelete.length&&(n.info("reset github commit properties due found no commits tracked"),w()),g}))}function D(e){return"object"==typeof e&&null!==e}function I(e,t){if(!D(e))return!1;for(const i in t){if(!(i in e))return n.error(`Missing key: ${i}`),!1;const o=typeof t[i],s=typeof e[i];if(D(t[i])){if(!D(e[i])||!I(e[i],t[i]))return n.error(`Invalid nested structure or type mismatch at key: ${i}`),!1}else if(o!==s)return n.error(`Type mismatch at key: ${i}. Expected ${o}, found ${s}`),!1}return!0}function E(e,t){return I(e,t)}const S={settings:{sync_function:"",timezone_correction:-3,update_frequency:4},options:{daily_summary_email_time:"15:00",email_daily_summary:!1,email_errors:!1,email_new_gcal_sync_release:!1,email_session:!1,maintenance_mode:!1,show_logs:!1}},$={ics_calendars:[]},A={username:"",commits_configs:{commits_calendar:"",ignored_repos:[],parse_commit_emojis:!1},issues_configs:{issues_calendar:""},personal_token:""};return class{constructor(e){if(this.configs=e,!function(e){if(!D(e))return!1;const t={basic:!0,ticktick:!0,github:!0};return t.basic=E(e,S),f in e&&(t.ticktick=E(e[f],$)),y in e&&(t.github=E(e[y],A)),Object.values(t).every((e=>!0===e))}(e))throw new Error("schema invalid");this.is_gas_environment="undefined"!=typeof Calendar,this.today_date=function(e){const t=new Date;return t.setHours(t.getHours()+e),t}(this.configs.settings.timezone_correction).toISOString().split("T")[0],n.info(`${p} is running at version ${g}!`)}parseGcalVersion(e){return Number(e.replace("v","").split(".").join(""))}getLatestGcalSyncRelease(){var e;const t=UrlFetchApp.fetch(`https://api.github.com/repos/${h}/releases?per_page=1`),i=null!==(e=JSON.parse(t.getContentText())[0])&&void 0!==e?e:{};if(0!==Object.keys(i).length)return i}install(){return e(this,void 0,void 0,(function*(){var e,t;o(this.configs.settings.sync_function),e=this.configs.settings.sync_function,t=this.configs.settings.update_frequency,ScriptApp.newTrigger(e).timeBased().everyMinutes(t).create(),Object.keys(r).forEach((e=>{PropertiesService.getScriptProperties().getProperties().includes(e)||i(r[e].key,"")})),n.info(`${p} was set to run function "${this.configs.settings.sync_function}" every ${this.configs.settings.update_frequency} minutes`)}))}uninstall(){return e(this,void 0,void 0,(function*(){o(this.configs.settings.sync_function),Object.keys(r).forEach((e=>{var t;t=r[e].key,PropertiesService.getScriptProperties().deleteProperty(t)})),n.info(`${p} automation was removed from appscript!`)}))}clearTodayEvents(){i(r.today_github_added_commits.key,[]),i(r.today_github_deleted_commits.key,[]),i(r.today_ticktick_added_tasks.key,[]),i(r.today_ticktick_completed_tasks.key,[]),i(r.today_ticktick_updated_tasks.key,[]),n.info(`${this.today_date} stats were reseted!`)}getTodayEvents(){return{addedGithubCommits:t(r.today_github_added_commits.key),addedTicktickTasks:t(r.today_ticktick_added_tasks.key),completedTicktickTasks:t(r.today_ticktick_completed_tasks.key),deletedGithubCommits:t(r.today_github_deleted_commits.key),updatedTicktickTasks:t(r.today_ticktick_updated_tasks.key)}}sync(){return e(this,void 0,void 0,(function*(){const e=this.configs[y],t=this.configs[f];if(!e&&!t)return void n.info("nothing to sync");(e=>{let t=!1;e.forEach((e=>{a(e)||(d(e),n.info(`created google calendar: [${e}]`),t=!0)})),t&&Utilities.sleep(2e3)})([...new Set([].concat(e?[this.configs[y].commits_configs.commits_calendar,this.configs[y].issues_configs.issues_calendar]:[]).concat(t?[...this.configs[f].ics_calendars.map((e=>e.gcal)),...this.configs[f].ics_calendars.map((e=>e.gcal_done))]:[]))]);const i=Object.assign({},e&&(yield C(this.configs)));console.log(i)}))}}}));
