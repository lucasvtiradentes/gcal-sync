class TickSync{constructor(e){this.CONFIG_KEYS=["email","icsTasksCalendars","gcalCompletedCalendar","options"],this.parseConfigs(e),this.config=e}parseConfigs(e){this.CONFIG_KEYS.forEach((t=>{if(!Object.keys(e).includes(t))throw new Error(`missing key in configs: ${t}`)}))}getBetween(e,t,s){const n=e.slice(e.search(t)).replace(t,"");return n.slice(0,n.search(s))}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const s={dtstamp:this.getBetween(t,"DTSTAMP:","\r\n"),dtstart:this.getBetween(t,"DTSTART;VALUE=DATE:","\r\n"),name:this.getBetween(t,"SUMMARY:","\r\n"),id:this.getBetween(t,"UID:","\r\n"),description:this.getBetween(t,"DESCRIPTION:","\r\n"),sequence:this.getBetween(t,"SEQUENCE:","\r\n"),tzid:this.getBetween(t,"TZID:","\r\n")};return e.push(s),e}),[])}getEventsFromIcsCalendar(e){let t="";const s=e.replace("webcal://","https://"),n=UrlFetchApp.fetch(s,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=n.getResponseCode())throw new Error("Error: Encountered HTTP error "+n.getResponseCode()+" when accessing "+s);{const e=RegExp("(BEGIN:VCALENDAR.*?END:VCALENDAR)","s").exec(n.getContentText());if(null==e)throw new Error("[ERROR] Incorrect ics/ical URL: "+s);t=e[0]}return this.parseIcsStringIntoEvents(t)}getAllCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}getEventsFromCalendar(e){return Calendar.Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,s;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",link:e.htmlLink,attendees:e.attendees.length>0?e.attendees:[],visibility:e.visibility,dateStart:e.start,dateEnd:e.end,dateCreated:e.created,dateLastUpdated:e.updated,extendedProperties:null!==(s=e.extendedProperties)&&void 0!==s?s:{}}}getAllOwnedCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}createCalendar(e){if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const t=Calendar.newCalendar();t.summary=e,t.description="Created by GAS",t.timeZone=Calendar.Settings.get("timezone").value;const s=Calendar.Calendars.insert(t);return console.log(`Created the calendar ${s.summary}, with the ID ${s.id}`),s}getTasksFromIcsCalendars(){return this.config.icsTasksCalendars.reduce(((e,t)=>{const[s,n]=t,a=this.getEventsFromIcsCalendar(s).map((e=>Object.assign(Object.assign({},e),{taskCalendar:n})));return e=[].concat.apply(e,a)}),[])}getTasksFromGoogleCalendars(){return this.config.icsTasksCalendars.reduce(((e,t)=>{const s=t[1],n=this.getCalendarByName(s),a=this.getEventsFromCalendar(n);return e=[].concat.apply(e,a)}),[])}createCalendars(){const e=[this.config.gcalCompletedCalendar,...this.config.icsTasksCalendars.map((e=>e[1]))];console.log("allGcalendarsNames: ",e),e.forEach((e=>{this.getCalendarByName(e)||this.createCalendar(e)}))}syncEvents(){this.createCalendars();const e=this.getTasksFromIcsCalendars(),t=this.getTasksFromGoogleCalendars();e.forEach((e=>{t.map((e=>e.id)).includes(e.id)?e?console.log(`${e.name} - dont modify`):console.log(`${e.name} - change date`):console.log(`${e.name} - create task on gcal`)})),t.forEach((e=>{console.log(e.extendedProperties)})),console.log(e),console.log(t)}}this.TickSync=TickSync;