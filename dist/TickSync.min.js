class TickSync{constructor(e){this.CONFIG_KEYS=["email","icsCalendars","gcalCompletedCalendar","startDate","options"],this.parseConfigs(e),this.config=e}parseConfigs(e){this.CONFIG_KEYS.forEach((t=>{if(!Object.keys(e).includes(t))throw new Error(`missing key in configs: ${t}`)}))}getBetween(e,t,s){const n=e.slice(e.search(t)).replace(t,"");return n.slice(0,n.search(s))}getParsedTimeStamp(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1].substring(0,2),minutes:t[1].substring(2,4),seconds:t[1].substring(4,6)}}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const s=this.getBetween(t,"TZID:","\r\n");let n=this.getBetween(t,"DTSTART;","\r\n");n=n.slice(n.search(":")+1);let a=this.getBetween(t,"DTEND;","\r\n");if(a=a.slice(a.search(":")+1),""===a){const e=this.getParsedTimeStamp(`${n}T000000`),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),a={date:t.toISOString().split("T")[0]},n={date:`${e.year}-${e.month}-${e.day}`}}else{const e=this.getParsedTimeStamp(n),t=this.getParsedTimeStamp(a);n={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:s},a={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:s}}const r={id:this.getBetween(t,"UID:","\r\n"),name:this.getBetween(t,"SUMMARY:","\r\n"),description:this.getBetween(t,"DESCRIPTION:","\r\n"),tzid:s,start:n,end:a};return e.push(r),e}),[])}getEventsFromIcsCalendar(e){let t="";const s=e.replace("webcal://","https://"),n=UrlFetchApp.fetch(s,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=n.getResponseCode())throw new Error("Error: Encountered HTTP error "+n.getResponseCode()+" when accessing "+s);{const e=RegExp("(BEGIN:VCALENDAR.*?END:VCALENDAR)","s").exec(n.getContentText());if(null==e)throw new Error("[ERROR] Incorrect ics/ical URL: "+s);t=e[0]}return this.parseIcsStringIntoEvents(t)}getAllCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}getEventsFromCalendar(e){return Calendar.Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,s;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",link:e.htmlLink,attendees:e.attendees.length>0?e.attendees:[],visibility:e.visibility,dateStart:e.start,dateEnd:e.end,dateCreated:e.created,dateLastUpdated:e.updated,extendedProperties:null!==(s=e.extendedProperties)&&void 0!==s?s:{}}}getAllOwnedCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}createCalendar(e){if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const t=Calendar.newCalendar();t.summary=e,t.description="Created by GAS",t.timeZone=Calendar.Settings.get("timezone").value;const s=Calendar.Calendars.insert(t);return console.log(`Created the calendar ${s.summary}, with the ID ${s.id}`),s}addEventToCalendar(e,t){const s=Calendar.Events.insert(t,e.id);return console.log(`event ${s.summary} was added to calendar ${e.summary}`),s}getTasksFromIcsCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const[s,n]=t,a=this.getEventsFromIcsCalendar(s).map((e=>Object.assign(Object.assign({},e),{taskCalendar:n})));return e=[].concat.apply(e,a)}),[])}getTasksFromGoogleCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const s=t[1],n=this.getCalendarByName(s),a=this.getEventsFromCalendar(n);return e=[].concat.apply(e,a)}),[])}createCalendars(){[this.config.gcalCompletedCalendar,...this.config.icsCalendars.map((e=>e[1]))].forEach((e=>{this.getCalendarByName(e)||this.createCalendar(e)}))}syncEvents(){this.createCalendars();const e=this.getTasksFromIcsCalendars(),t=this.getTasksFromGoogleCalendars();e.forEach((e=>{const s=t.map((e=>e.id)).includes(e.id),n=this.getCalendarByName(e.taskCalendar);if(!s){const t={private:{tickSync:!0,tickTaskId:e.id}},s={summary:e.name,description:e.description,start:e.start,end:e.end,extendedProperties:t};console.log(s),console.log(`${e.name} - create task on gcal`),this.addEventToCalendar(n,s)}})),t.forEach((e=>{console.log(e.extendedProperties)})),console.log(e),console.log(t)}}this.TickSync=TickSync;