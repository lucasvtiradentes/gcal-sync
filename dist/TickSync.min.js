class TickSync{constructor(e){this.version="0.0.1",this.appName="ticktick-gcal-sync",this.githubRepository="lucasvtiradentes/ticktick-gcal-sync",this.todayDate=(new Date).toISOString().split("T")[0],this.appsScriptsProperties={todayAddedEvents:"todayAddedEvents",todayUpdateEvents:"todayUpdateEvents",todayCompletedEvents:"todayCompletedEvents",lastReleasedVersionAlerted:"lastReleasedVersionAlerted"},this.validateConfigs(e),this.config=e,this.logger(`${this.appName} is running at version ${this.version}`)}validateConfigs(e){[{objToCheck:e,requiredKeys:["synchronization","notifications","options"],name:"configs"},{objToCheck:e.synchronization,requiredKeys:["icsCalendars","syncFunction","updateFrequency"],name:"configs.synchronization"},{objToCheck:e.notifications,requiredKeys:["email","timeToEmail","timeZoneCorrection","emailSummary","emailNewRelease"],name:"configs.notifications"},{objToCheck:e.options,requiredKeys:["showLogs","maintanceMode"],name:"configs.options"}].forEach((e=>{const{objToCheck:t,requiredKeys:s,name:i}=e;s.forEach((e=>{if(!t||!Object.keys(t).includes(e))throw new Error(`missing key in ${i}: ${e}`)}))}))}getStrBetween(e,t,s){const i=e.slice(e.search(t)).replace(t,"");return i.slice(0,i.search(s))}getParsedTimeStamp(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}getDateFixedByTimezone(e){const t=new Date;return t.setHours(t.getHours()+e),t}isCurrentTimeAfter(e){const t=this.getDateFixedByTimezone(this.config.notifications.timeZoneCorrection),s=60*Number(t.getHours())+Number(t.getMinutes()),i=e.split(":");return s>=60*Number(i[0])+Number(i[1])}logger(e){this.config.options.showLogs&&console.log(e)}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const s=this.getStrBetween(t,"TZID:","\r\n");let i=this.getStrBetween(t,"DTSTART;","\r\n");i=i.slice(i.search(":")+1);let r=this.getStrBetween(t,"DTEND;","\r\n");if(r=r.slice(r.search(":")+1),""===r){const e=this.getParsedTimeStamp(i),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),r={date:t.toISOString().split("T")[0]},i={date:`${e.year}-${e.month}-${e.day}`}}else{const e=this.getParsedTimeStamp(i),t=this.getParsedTimeStamp(r);i={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:s},r={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:s}}const n={id:this.getStrBetween(t,"UID:","\r\n"),name:this.getStrBetween(t,"SUMMARY:","\r\n"),description:this.getStrBetween(t,"DESCRIPTION:","\r\n"),tzid:s,start:i,end:r};return e.push(n),e}),[])}getEventsFromIcsCalendar(e){let t="";const s=e.replace("webcal://","https://"),i=UrlFetchApp.fetch(s,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=i.getResponseCode())throw new Error("Error: Encountered HTTP error "+i.getResponseCode()+" when accessing "+s);if(t=i.getContentText(),-1===t.search("BEGIN:VCALENDAR"))throw new Error("[ERROR] Incorrect ics/ical URL: "+s);return t.search("SUMMARY:No task.")>0?[]:this.parseIcsStringIntoEvents(t)}getGoogleAppsScriptsObject(){return PropertiesService.getScriptProperties()}getAppsScriptsProperties(){return this.getGoogleAppsScriptsObject().getKeys()}getAppsScriptsProperty(e){return this.getGoogleAppsScriptsObject().getProperty(e)}updateAppsScriptsProperty(e,t){this.getGoogleAppsScriptsObject().setProperty(e,t)}removeAppsScriptsProperty(e){this.getGoogleAppsScriptsObject().deleteProperty(e)}getGoogleAppsScriptsTriggerObj(){return ScriptApp}getAppsScriptsTriggers(){return this.getGoogleAppsScriptsTriggerObj().getProjectTriggers()}addAppsScriptsTrigger(e,t){this.getGoogleAppsScriptsTriggerObj().newTrigger(e).timeBased().everyMinutes(t).create()}removeAppsScriptsTrigger(e){const t=this.getAppsScriptsTriggers().find((t=>t.getHandlerFunction()===e));t&&this.getGoogleAppsScriptsTriggerObj().deleteTrigger(t)}getGoogleCalendarObj(){return Calendar}getAllCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items}getAllOwnedCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}createCalendar(e){const t=this.getGoogleCalendarObj();if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const s=t.newCalendar();s.summary=e,s.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(s)}getEventsFromCalendar(e){return this.getGoogleCalendarObj().Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,s,i,r,n;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(s=e.attendees)&&void 0!==s?s:[],reminders:null!==(i=e.reminders)&&void 0!==i?i:{},visibility:null!==(r=e.visibility)&&void 0!==r?r:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,extendedProperties:null!==(n=e.extendedProperties)&&void 0!==n?n:{}}}addEventToCalendar(e,t){return this.getGoogleCalendarObj().Events.insert(t,e.id)}updateEventFromCalendar(e,t,s){const i=this.getEventById(e,t.id),r=Object.assign(Object.assign({},i),s);this.getGoogleCalendarObj().Events.update(r,e.id,t.id)}moveEventToOtherCalendar(e,t,s){this.getGoogleCalendarObj().Events.move(e.id,t.id,s.id)}getEventById(e,t){return this.getGoogleCalendarObj().Events.get(e.id,t)}getGoogleEmailObj(){return MailApp}sendEmail(e){this.getGoogleEmailObj().sendEmail(e)}installTickSync(){this.removeAppsScriptsTrigger(this.config.synchronization.syncFunction),this.addAppsScriptsTrigger(this.config.synchronization.syncFunction,this.config.synchronization.updateFrequency),this.logger(`${this.appName} was set to run ${this.config.synchronization.syncFunction} every ${this.config.synchronization.updateFrequency} minutes`)}uninstallTickSync(){this.removeAppsScriptsTrigger(this.config.synchronization.syncFunction),this.removeAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents),this.removeAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents),this.removeAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents),this.removeAppsScriptsProperty(this.appsScriptsProperties.lastReleasedVersionAlerted),this.logger(`${this.appName} automation was removed from appscript!`)}cleanTodayEventsStats(){this.updateAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents,""),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents,""),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents,""),this.logger(`${this.todayDate} stats were reseted!`)}showTodayEventsStats(){const e=e=>e.split("\n").filter((e=>e.length>0));this.logger(`stats for ${this.todayDate}`);const t=this.getAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents),s=this.getAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents),i=this.getAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents);this.logger(`addedEvents: ${e(t).length}${e(t).length>0?`\n\n${this.formatEventsList(t)}`:""}`),this.logger(`updatedEvents: ${e(s).length}${e(s).length>0?`\n\n${this.formatEventsList(s)}`:""}`),this.logger(`completedEvents: ${e(i).length}${e(i).length>0?`\n\n${this.formatEventsList(i)}`:""}`)}sendNewReleaseEmail(){var e,t;const s=null!==(e=this.getAppsScriptsProperty(this.appsScriptsProperties.lastReleasedVersionAlerted))&&void 0!==e?e:"",i=e=>Number(e.replace("v","").split(".").join("")),r=UrlFetchApp.fetch(`https://api.github.com/repos/${this.githubRepository}/releases?per_page=1`),n=null!==(t=JSON.parse(r.getContentText())[0])&&void 0!==t?t:{};if(0===Object.keys(n).length)return;const a=i(n.tag_name);if(a>i(this.version)&&a.toString()!=s){const e=`Hi!\n      <br/><br/>\n      a new <a href="https://github.com/${this.githubRepository}">${this.appName}</a> version is available: <br/>\n      <ul>\n        <li>new version: ${n.tag_name}</li>\n        <li>published at: ${n.published_at}</li>\n      </ul>\n      you can check details <a href="https://github.com/${this.githubRepository}/releases">here</a>.\n      `,t={to:this.config.notifications.email,name:`${this.appName} bot`,subject:`new ${this.appName} version [${n.tag_name}] was released!`,htmlBody:e};this.sendEmail(t),this.updateAppsScriptsProperty(this.appsScriptsProperties.lastReleasedVersionAlerted,a.toString()),this.logger(`a new release email was sent to ${this.config.notifications.email}`)}}sendSummaryEmail(){const e=e=>e.split("\n").filter((e=>e.length>0)),t=e(this.getAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents)),s=e(this.getAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents)),i=e(this.getAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents));if(t.length+s.length+i.length>0){const e={addedEvents:t,updatedEvents:s,completedEvents:i},r=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length,n=0===e.addedEvents.length?[]:this.formatSummary(e.addedEvents.join("\n")).split("\n"),a=0===e.updatedEvents.length?[]:this.formatSummary(e.updatedEvents.join("\n")).split("\n"),o=0===e.completedEvents.length?[]:this.formatSummary(e.completedEvents.join("\n")).split("\n");let p="";p=`Hi!<br/><br/>${this.appName} made ${r} changes to your calendar:<br/><br/>\n`;const d=n.map((e=>`<li>${e}</li>`)),c=a.map((e=>`<li>${e}</li>`)),l=o.map((e=>`<li>${e}</li>`));p+=d.length>0?`added events: ${d.length}<br/> \n <ul>\n${d.join("\n")}</ul>\n`:"",p+=c.length>0?`updated events: ${c.length}<br/> \n <ul>\n${c.join("\n")}</ul>\n`:"",p+=l.length>0?`completed events: ${l.length}<br/> \n <ul>\n${l.join("\n")}</ul>\n`:"",p+=`If you want to share feedback, please contact us at <a href='https://github.com/${this.githubRepository}'>github</a>.`;const h={to:this.config.notifications.email,name:`${this.appName} bot`,subject:`${this.appName} summary for ${this.todayDate} - ${r} modifications`,htmlBody:p};this.sendEmail(h),this.logger(`summary email was sent to ${this.config.notifications.email}`),this.cleanTodayEventsStats()}}formatSummary(e){if(""===e||!e)return"";const t=e.split("\n").map((e=>e.split(" | "))).sort(((e,t)=>Number(new Date(e[0]))-Number(new Date(t[0])))),s=Math.max(...t.map((e=>e[1].length)));return t.map((e=>{const[t,i,r]=e,n=s-i.length;return[t,0===n?i:i+"_".repeat(n),r]})).map((e=>e.join(" | "))).join("\n")}syncEvents(){const e={addedEvents:[],updatedEvents:[],completedEvents:[]};this.createMissingGoogleCalendars(),this.createMissingAppsScriptsProperties();const t=this.getTasksFromGoogleCalendars(),s=this.config.synchronization.icsCalendars.filter((e=>{var t;return"string"==typeof(null===(t=e[3])||void 0===t?void 0:t.tag)})).map((e=>this.checkCalendarItem(e,t))),i=s.reduce(((e,t)=>(e.added||(e.added=[],e.updated=[],e.taggedIcsTasks=[]),e.added.push(...t.addedTasks),e.updated.push(...t.updatedTasks),e.taggedIcsTasks.push(...t.tasksFromIcs),e)),{});e.addedEvents.push(...i.added),e.updatedEvents.push(...i.updated);const r=this.config.synchronization.icsCalendars.filter((e=>!e[3]||e[3]&&!e[3].tag)).map((e=>this.checkCalendarItem(e,t,s))).reduce(((e,t)=>(e.added||(e.added=[],e.updated=[],e.taggedIcsTasks=[]),e.added.push(...t.addedTasks),e.updated.push(...t.updatedTasks),e.taggedIcsTasks.push(...t.tasksFromIcs),e)),{});e.addedEvents.push(...r.added),e.updatedEvents.push(...r.updated);const n=[...i.taggedIcsTasks,...r.taggedIcsTasks];e.completedEvents=this.checkCalendarCompletedTasks(t,n),this.logger(`addedEvents: ${e.addedEvents.length}`),this.logger(`updatedEvents: ${e.updatedEvents.length}`),this.logger(`completedEvents: ${e.completedEvents.length}`);const a=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length,o=this.getAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents),p=this.getAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents),d=this.getAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents);a>0&&(this.updateAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents,`${o?o+"\n":""}${e.addedEvents.join("\n")}`),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents,`${p?p+"\n":""}${e.updatedEvents.join("\n")}`),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents,`${d?d+"\n":""}${e.completedEvents.join("\n")}`),this.logger("adding date stats to properties")),this.isCurrentTimeAfter(this.config.notifications.timeToEmail)&&(this.config.notifications.emailSummary&&this.sendSummaryEmail(),this.config.notifications.emailNewRelease&&this.sendNewReleaseEmail())}createMissingGoogleCalendars(){[...new Set([...this.config.synchronization.icsCalendars.map((e=>e[1])),...this.config.synchronization.icsCalendars.map((e=>e[2]))])].forEach((e=>{this.getCalendarByName(e)||(this.createCalendar(e),this.logger(`created google calendar: [${e}]`))}))}createMissingAppsScriptsProperties(){this.getAppsScriptsProperties().includes(this.appsScriptsProperties.todayAddedEvents)||(this.updateAppsScriptsProperty(this.appsScriptsProperties.todayAddedEvents,""),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayUpdateEvents,""),this.updateAppsScriptsProperty(this.appsScriptsProperties.todayCompletedEvents,""))}checkTicktickAddedAndUpdatedTasks(e,t,s){const[i,r,n,a]=e,o=[],p=[],d=this.getCalendarByName(r);return t.forEach((e=>{if(s.map((e=>e.extendedProperties.private.tickTaskId)).includes(e.id)){const t=s.find((t=>t.extendedProperties.private.tickTaskId===e.id)),i=e.name!==t.summary,r=e.description!==t.description,n=Object.keys(e.start).length!==Object.keys(t.start).length,a=e.start.date!==t.start.date,o=e.start.dateTime!==t.start.dateTime;if(i||r||n||a||o){const s={summary:e.name,description:e.description,start:e.start,end:e.end};this.config.options.maintanceMode||this.updateEventFromCalendar(d,t,s);const i=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${d.summary} | ${e.name}`;p.push(i),this.logger(`gcal event was updated  : ${i}`)}}else{const t={private:{tickTaskId:e.id,calendar:r,completedCalendar:n}},s={summary:e.name,description:e.description,start:e.start,end:e.end,reminders:{useDefault:!0},extendedProperties:t};this.config.options.maintanceMode||this.addEventToCalendar(d,s);const i=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${d.summary} | ${e.name}`;o.push(i),this.logger(`added event to gcal     : ${i}`)}})),[o,p]}checkCalendarCompletedTasks(e,t){const s=[];return e.filter((e=>e.extendedProperties.private.tickTaskId)).forEach((e=>{if(!t.map((e=>e.id)).includes(e.extendedProperties.private.tickTaskId)){const t=this.getCalendarByName(e.extendedProperties.private.calendar),i=this.getCalendarByName(e.extendedProperties.private.completedCalendar);this.config.options.maintanceMode||this.moveEventToOtherCalendar(t,e,i);const r=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${e.extendedProperties.private.calendar} | ${e.summary}`;s.push(r),this.logger(`gcal event was completed: ${r}`)}})),s}formatEventsList(e){return this.formatSummary(e.split("\n").filter((e=>e.length>0)).map((e=>`- ${e}`)).join("\n"))}checkCalendarItem(e,t,s){const[i,r,n,a]=e;let o=this.getEventsFromIcsCalendar(i);a.ignoredTags&&s&&a.ignoredTags.forEach((e=>{const t=s.find((t=>t.calendarOptions.tag===e));if(t){const e=t.tasksFromIcs.map((e=>e.id));o=o.filter((t=>!1===e.includes(t.id)))}}));const[p,d]=this.checkTicktickAddedAndUpdatedTasks(e,o,t);return{icsCal:i,gCalCorresponding:r,completedCal:n,calendarOptions:a,tasksFromIcs:o,addedTasks:p,updatedTasks:d}}getTasksFromGoogleCalendars(){return this.config.synchronization.icsCalendars.reduce(((e,t)=>{const s=t[1],i=this.getCalendarByName(s),r=this.getEventsFromCalendar(i);return e=[].concat.apply(e,r)}),[])}}