class TickSync{constructor(e){this.CONFIG_KEYS=["email","icsCalendars","gcalCompletedCalendar","options"],this.parseConfigs(e),this.config=e}parseConfigs(e){this.CONFIG_KEYS.forEach((t=>{if(!Object.keys(e).includes(t))throw new Error(`missing key in configs: ${t}`)}))}getBetween(e,t,s){const n=e.slice(e.search(t)).replace(t,"");return n.slice(0,n.search(s))}getParsedTimeStamp(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1].substring(0,2),minutes:t[1].substring(2,4),seconds:t[1].substring(4,6)}}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const s=this.getBetween(t,"TZID:","\r\n");let n=this.getBetween(t,"DTSTART;","\r\n");n=n.slice(n.search(":")+1);let a=this.getBetween(t,"DTEND;","\r\n");if(a=a.slice(a.search(":")+1),""===a){const e=this.getParsedTimeStamp(`${n}T000000`),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),a={date:t.toISOString().split("T")[0]},n={date:`${e.year}-${e.month}-${e.day}`}}else{const e=this.getParsedTimeStamp(n),t=this.getParsedTimeStamp(a);n={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:s},a={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:s}}const r={id:this.getBetween(t,"UID:","\r\n"),name:this.getBetween(t,"SUMMARY:","\r\n"),description:this.getBetween(t,"DESCRIPTION:","\r\n"),tzid:s,start:n,end:a};return e.push(r),e}),[])}getEventsFromIcsCalendar(e,t){let s="";const n=e.replace("webcal://","https://"),a=UrlFetchApp.fetch(n,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=a.getResponseCode())throw new Error("Error: Encountered HTTP error "+a.getResponseCode()+" when accessing "+n);if(s=a.getContentText(),-1===s.search("BEGIN:VCALENDAR"))throw new Error("[ERROR] Incorrect ics/ical URL: "+n);const r=this.parseIcsStringIntoEvents(s);return t?r.filter((e=>!1===t.some((t=>e.name.search(t)>-1)))):r}getAllCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}getEventsFromCalendar(e){return Calendar.Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,s,n,a;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",link:e.htmlLink,attendees:null!==(s=e.attendees)&&void 0!==s?s:[],visibility:null!==(n=e.visibility)&&void 0!==n?n:"default",dateStart:e.start,dateEnd:e.end,dateCreated:e.created,dateLastUpdated:e.updated,extendedProperties:null!==(a=e.extendedProperties)&&void 0!==a?a:{}}}getAllOwnedCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}createCalendar(e){if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const t=Calendar.newCalendar();t.summary=e,t.timeZone=Calendar.Settings.get("timezone").value;return Calendar.Calendars.insert(t)}addEventToCalendar(e,t){return Calendar.Events.insert(t,e.id)}moveEventToOtherCalendar(e,t,s){Calendar.Events.move(e.id,t.id,s.id)}getEventById(e,t){return Calendar.Events.get(e.id,t)}updateEventFromCalendar(e,t,s){const n=this.getEventById(e,t.id),a=Object.assign(Object.assign({},n),s);Calendar.Events.update(a,e.id,t.id)}createCalendars(){[this.config.gcalCompletedCalendar,...this.config.icsCalendars.map((e=>e[1]))].forEach((e=>{this.getCalendarByName(e)||(this.createCalendar(e),this.config.options.showLogs&&console.log(`Created the calendar ${e}`))}))}getTasksFromIcsCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const[s,n,a]=t,r=(a?this.getEventsFromIcsCalendar(s,a):this.getEventsFromIcsCalendar(s)).map((e=>Object.assign(Object.assign({},e),{taskCalendar:n})));return e=[].concat.apply(e,r)}),[])}getTasksFromGoogleCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const s=t[1],n=this.getCalendarByName(s),a=this.getEventsFromCalendar(n);return e=[].concat.apply(e,a)}),[])}syncEvents(){const e={addedEvents:[],updatedEvents:[],completedEvents:[]};this.createCalendars();const t=this.getTasksFromIcsCalendars(),s=this.getTasksFromGoogleCalendars();t.forEach((t=>{const n=s.map((e=>e.extendedProperties.private.tickTaskId)).includes(t.id),a=this.getCalendarByName(t.taskCalendar);if(n){const n=s.find((e=>e.extendedProperties.private.tickTaskId===t.id)),r=t.name!==n.summary,d=t.description!==n.description,i=Object.keys(t.start).length!==Object.keys(n.dateStart).length,o=t.start.date!==n.dateStart.date,l=t.start.dateTime!==n.dateStart.dateTime;if(r||d||i||o||l){const s={summary:t.name,description:t.description,start:t.start,end:t.end};this.config.options.debugMode||this.updateEventFromCalendar(a,n,s),this.config.options.showLogs&&(e.updatedEvents.push(`${a.summary}: ${t.name}`),console.log(`gcal event was updated  : [${t.name}] / [${a.summary}]`))}}else{const s={private:{tickSync:!0,tickTaskId:t.id,calendar:t.taskCalendar}},n={summary:t.name,description:t.description,start:t.start,end:t.end,extendedProperties:s};this.config.options.debugMode||this.addEventToCalendar(a,n),this.config.options.showLogs&&(e.addedEvents.push(`${a.summary}: ${t.name}`),console.log(`added event to gcal     : [${t.name}] / [${a.summary}]`))}}));s.filter((e=>e.extendedProperties.private.tickTaskId)).forEach((s=>{if(!t.map((e=>e.id)).includes(s.extendedProperties.private.tickTaskId)){const t=this.getCalendarByName(s.extendedProperties.private.calendar),n=this.getCalendarByName(this.config.gcalCompletedCalendar);this.config.options.debugMode||this.moveEventToOtherCalendar(t,s,n),this.config.options.showLogs&&(e.completedEvents.push(`${s.extendedProperties.private.calendar}: ${s.summary}`),console.log(`gcal event was completed: [${s.summary}]`))}})),this.config.options.showLogs&&(console.log("------------------------------------------\n"),console.log(`addedEvents: ${e.addedEvents.length}`),console.log(e.addedEvents),console.log(`updatedEvents: ${e.updatedEvents.length}`),console.log(e.updatedEvents),console.log(`completedEvents: ${e.completedEvents.length}`),console.log(e.completedEvents))}}this.TickSync=TickSync;