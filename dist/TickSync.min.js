class TickSync{constructor(e){this.CONFIG_KEYS=["icsCalendars","gcalCompleted","syncFunction","summary","options"],this.parseConfigs(e),this.config=e}parseConfigs(e){this.CONFIG_KEYS.forEach((t=>{if(!Object.keys(e).includes(t))throw new Error(`missing key in configs: ${t}`)}))}getBetween(e,t,n){const s=e.slice(e.search(t)).replace(t,"");return s.slice(0,s.search(n))}getParsedTimeStamp(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1].substring(0,2),minutes:t[1].substring(2,4),seconds:t[1].substring(4,6)}}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const n=this.getBetween(t,"TZID:","\r\n");let s=this.getBetween(t,"DTSTART;","\r\n");s=s.slice(s.search(":")+1);let r=this.getBetween(t,"DTEND;","\r\n");if(r=r.slice(r.search(":")+1),""===r){const e=this.getParsedTimeStamp(`${s}T000000`),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),r={date:t.toISOString().split("T")[0]},s={date:`${e.year}-${e.month}-${e.day}`}}else{const e=this.getParsedTimeStamp(s),t=this.getParsedTimeStamp(r);s={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:n},r={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:n}}const a={id:this.getBetween(t,"UID:","\r\n"),name:this.getBetween(t,"SUMMARY:","\r\n"),description:this.getBetween(t,"DESCRIPTION:","\r\n"),tzid:n,start:s,end:r};return e.push(a),e}),[])}getEventsFromIcsCalendar(e,t){let n="";const s=e.replace("webcal://","https://"),r=UrlFetchApp.fetch(s,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=r.getResponseCode())throw new Error("Error: Encountered HTTP error "+r.getResponseCode()+" when accessing "+s);if(n=r.getContentText(),-1===n.search("BEGIN:VCALENDAR"))throw new Error("[ERROR] Incorrect ics/ical URL: "+s);const a=this.parseIcsStringIntoEvents(n);return t?a.filter((e=>!1===t.some((t=>e.name.search(t)>-1)))):a}getAllCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}getEventsFromCalendar(e){return Calendar.Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,n,s,r,a;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",link:e.htmlLink,attendees:null!==(n=e.attendees)&&void 0!==n?n:[],visibility:null!==(s=e.visibility)&&void 0!==s?s:"default",reminders:null!==(r=e.reminders)&&void 0!==r?r:{},dateStart:e.start,dateEnd:e.end,dateCreated:e.created,dateLastUpdated:e.updated,extendedProperties:null!==(a=e.extendedProperties)&&void 0!==a?a:{}}}getAllOwnedCalendars(){return Calendar.CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}createCalendar(e){if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const t=Calendar.newCalendar();t.summary=e,t.timeZone=Calendar.Settings.get("timezone").value;return Calendar.Calendars.insert(t)}addEventToCalendar(e,t){return Calendar.Events.insert(t,e.id)}moveEventToOtherCalendar(e,t,n){Calendar.Events.move(e.id,t.id,n.id)}getEventById(e,t){return Calendar.Events.get(e.id,t)}updateEventFromCalendar(e,t,n){const s=this.getEventById(e,t.id),r=Object.assign(Object.assign({},s),n);Calendar.Events.update(r,e.id,t.id)}createCalendars(){[this.config.gcalCompleted,...this.config.icsCalendars.map((e=>e[1]))].forEach((e=>{this.getCalendarByName(e)||(this.createCalendar(e),this.config.options.showLogs&&console.log(`Created the calendar ${e}`))}))}getTasksFromIcsCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const[n,s,r]=t,a=(r?this.getEventsFromIcsCalendar(n,r):this.getEventsFromIcsCalendar(n)).map((e=>Object.assign(Object.assign({},e),{taskCalendar:s})));return e=[].concat.apply(e,a)}),[])}getTasksFromGoogleCalendars(){return this.config.icsCalendars.reduce(((e,t)=>{const n=t[1],s=this.getCalendarByName(n),r=this.getEventsFromCalendar(s);return e=[].concat.apply(e,r)}),[])}shouldSendEmail(){const e=this.config.summary.timeToEmail.split(":"),t=60*Number(e[0])+Number(e[1]),n=new Date;n.setHours(n.getHours()+this.config.summary.timeZoneCorrection);return 60*Number(n.getHours())+Number(n.getMinutes())>=t}emailSummary(e){const t=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length;let n="";n=`TickSync made ${t} changes to your calendar:<br/><br/>\n`;const s=e.addedEvents.map((e=>`<li>${e}</li>`)),r=e.updatedEvents.map((e=>`<li>${e}</li>`)),a=e.completedEvents.map((e=>`<li>${e}</li>`));n+=s.length>0?`added events:<br/> \n <ul>\n${s.join("\n")}</ul>\n`:"",n+=r.length>0?`updated events:<br/> \n <ul>\n${r.join("\n")}</ul>\n`:"",n+=a.length>0?`completed events:<br/> \n <ul>\n${a.join("\n")}</ul>\n`:"",n+="If you want to share feedback, please contact us at <a href='https://github.com/lucasvtiradentes/ticktick-gcal-sync'>github</a>.";const i={to:this.config.summary.email,name:"TickSync bot",subject:`TickSync summary for ${(new Date).toLocaleString("pt-br").split(", ")[0]} - ${t} modifications`,htmlBody:n};MailApp.sendEmail(i),this.config.options.showLogs&&console.log(`summary email was sent to ${this.config.summary.email}`)}setupTickSync(){const e=ScriptApp.getProjectTriggers().find((e=>e.getHandlerFunction()===this.config.syncFunction));e&&ScriptApp.deleteTrigger(e),ScriptApp.newTrigger(this.config.syncFunction).timeBased().everyMinutes(this.config.options.updateFrequency).create(),this.config.options.showLogs&&console.log(`setup TickSync to update every ${this.config.options.updateFrequency} minutes`)}uninstallTickSync(){const e=ScriptApp.getProjectTriggers().find((e=>e.getHandlerFunction()===this.config.syncFunction));e&&(ScriptApp.deleteTrigger(e),this.config.options.showLogs&&console.log("TickSync looping funtion trigger was removed!"))}cleanTodayEventsStats(){const e=PropertiesService.getScriptProperties();e.setProperty("addedEvents",""),e.setProperty("updatedEvents",""),e.setProperty("completedEvents",""),this.config.options.showLogs&&console.log(`${(new Date).toLocaleString("pt-br").split(", ")[0]} stats were reseted!`)}showTodayEventsStats(){const e=PropertiesService.getScriptProperties();console.log(`stats for ${(new Date).toLocaleString("pt-br").split(", ")[0]}`),console.log(e.getProperty("addedEvents")),console.log(e.getProperty("updatedEvents")),console.log(e.getProperty("completedEvents"))}syncEvents(){const e={addedEvents:[],updatedEvents:[],completedEvents:[]};this.createCalendars();const t=this.getTasksFromIcsCalendars(),n=this.getTasksFromGoogleCalendars();t.forEach((t=>{const s=n.map((e=>e.extendedProperties.private.tickTaskId)).includes(t.id),r=this.getCalendarByName(t.taskCalendar);if(s){const s=n.find((e=>e.extendedProperties.private.tickTaskId===t.id)),a=t.name!==s.summary,i=t.description!==s.description,o=Object.keys(t.start).length!==Object.keys(s.dateStart).length,d=t.start.date!==s.dateStart.date,l=t.start.dateTime!==s.dateStart.dateTime;if(a||i||o||d||l){const n={summary:t.name,description:t.description,start:t.start,end:t.end};this.config.options.debugMode||this.updateEventFromCalendar(r,s,n),this.config.options.showLogs&&(e.updatedEvents.push(`${r.summary}: ${t.name}`),console.log(`gcal event was updated  : [${t.name}] / [${r.summary}]`))}}else{const n={private:{tickSync:!0,tickTaskId:t.id,calendar:t.taskCalendar}},s={summary:t.name,description:t.description,start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:n};this.config.options.debugMode||this.addEventToCalendar(r,s),this.config.options.showLogs&&(e.addedEvents.push(`${r.summary}: ${t.name}`),console.log(`added event to gcal     : [${t.name}] / [${r.summary}]`))}}));if(n.filter((e=>e.extendedProperties.private.tickTaskId)).forEach((n=>{if(!t.map((e=>e.id)).includes(n.extendedProperties.private.tickTaskId)){const t=this.getCalendarByName(n.extendedProperties.private.calendar),s=this.getCalendarByName(this.config.gcalCompleted);this.config.options.debugMode||this.moveEventToOtherCalendar(t,n,s),this.config.options.showLogs&&(e.completedEvents.push(`${n.extendedProperties.private.calendar}: ${n.summary}`),console.log(`gcal event was completed: [${n.summary}]`))}})),this.config.options.showLogs&&(console.log(`addedEvents: ${e.addedEvents.length}`),console.log(`updatedEvents: ${e.updatedEvents.length}`),console.log(`completedEvents: ${e.completedEvents.length}`)),this.config.options.emailSummary){const t=PropertiesService.getScriptProperties();t.getKeys().includes("addedEvents")||t.setProperties({addedEvents:"",updatedEvents:"",completedEvents:""});const n=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length,s=t.getProperty("addedEvents"),r=t.getProperty("updatedEvents"),a=t.getProperty("completedEvents");n>0&&(t.setProperty("addedEvents",`${s?s+"\n":""}${e.addedEvents.join("\n")}`),t.setProperty("updatedEvents",`${r?r+"\n":""}${e.updatedEvents.join("\n")}`),t.setProperty("completedEvents",`${a?a+"\n":""}${e.completedEvents.join("\n")}`),this.config.options.showLogs&&console.log("adding date stats to properties"));if(s.split("\n").filter((e=>e.length>0)).length+r.split("\n").filter((e=>e.length>0)).length+a.split("\n").filter((e=>e.length>0)).length>0&&this.shouldSendEmail()){const e={addedEvents:t.getProperty("addedEvents").split("\n").filter((e=>e.length>0)),updatedEvents:t.getProperty("updatedEvents").split("\n").filter((e=>e.length>0)),completedEvents:t.getProperty("completedEvents").split("\n").filter((e=>e.length>0))};this.emailSummary(e),this.cleanTodayEventsStats()}}}}this.TickSync=TickSync;