class GcalSync{constructor(e){this.VERSION="1.0.1",this.APPNAME="gcal-sync",this.GITHUB_REPOSITORY="lucasvtiradentes/gcal-sync",this.TODAY_DATE=(new Date).toISOString().split("T")[0],this.ENVIRONMENT=this.detectEnvironment(),this.APPS_SCRIPTS_PROPERTIES={todayAddedEvents:"todayAddedEvents",todayUpdateEvents:"todayUpdateEvents",todayCompletedEvents:"todayCompletedEvents",lastReleasedVersionAlerted:"lastReleasedVersionAlerted"},this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class",incorrectIcsCalendar:"The provided ics/ical URL is incorrect: ",httpsError:"There was a HTTP error when accessing: "},this.validateConfigs(e),this.config=e,this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`)}validateConfigs(e){if(!e)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:e,requiredKeys:["ticktickSync","githubSync","notifications","options"],name:"configs"},{objToCheck:e.ticktickSync,requiredKeys:["icsCalendars","syncFunction","updateFrequency"],name:"configs.ticktickSync"},{objToCheck:e.githubSync,requiredKeys:["username","googleCalendar"],name:"configs.githubSync"},{objToCheck:e.notifications,requiredKeys:["email","timeToEmail","timeZoneCorrection","emailDailySummary","emailNewRelease","emailSession"],name:"configs.notifications"},{objToCheck:e.options,requiredKeys:["showLogs","maintanceMode","syncTicktick","syncGithub"],name:"configs.options"}].forEach((e=>{const{objToCheck:t,requiredKeys:s,name:i}=e;s.forEach((e=>{if(!t||!Object.keys(t).includes(e))throw new Error(`missing key in ${i}: ${e}`)}))}))}getStrBetween(e,t,s){const i=e.slice(e.search(t)).replace(t,"");return i.slice(0,i.search(s))}getParsedTimeStamp(e){const t=e.split("T");return{year:t[0].substring(0,4),month:t[0].substring(4,6),day:t[0].substring(6,8),hours:t[1]?t[1].substring(0,2):"00",minutes:t[1]?t[1].substring(2,4):"00",seconds:t[1]?t[1].substring(4,6):"00"}}getDateFixedByTimezone(e){const t=new Date;return t.setHours(t.getHours()+e),t}isCurrentTimeAfter(e){const t=this.getDateFixedByTimezone(this.config.notifications.timeZoneCorrection),s=60*Number(t.getHours())+Number(t.getMinutes()),i=e.split(":");return s>=60*Number(i[0])+Number(i[1])}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(e){this.config.options.showLogs&&console.log(e)}parseIcsStringIntoEvents(e){return e.split("BEGIN:VEVENT\r\n").filter((e=>e.search("SUMMARY")>-1)).reduce(((e,t)=>{const s=this.getStrBetween(t,"TZID:","\r\n");let i=this.getStrBetween(t,"DTSTART;","\r\n");i=i.slice(i.search(":")+1);let n=this.getStrBetween(t,"DTEND;","\r\n");if(n=n.slice(n.search(":")+1),""===n){const e=this.getParsedTimeStamp(i),t=new Date(Date.UTC(Number(e.year),Number(e.month)-1,Number(e.day),0,0,0));t.setDate(t.getDate()+1),n={date:t.toISOString().split("T")[0]},i={date:`${e.year}-${e.month}-${e.day}`}}else{const e=this.getParsedTimeStamp(i),t=this.getParsedTimeStamp(n);i={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:s},n={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:s}}const r={id:this.getStrBetween(t,"UID:","\r\n"),name:this.getStrBetween(t,"SUMMARY:","\r\n"),description:this.getStrBetween(t,"DESCRIPTION:","\r\n"),tzid:s,start:i,end:n};return e.push(r),e}),[])}getEventsFromIcsCalendar(e){let t="";const s=e.replace("webcal://","https://"),i=this.getGoogleFetch().fetch(s,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=i.getResponseCode())throw new Error(this.ERRORS.httpsError+s);if(t=i.getContentText(),-1===t.search("BEGIN:VCALENDAR"))throw new Error(this.ERRORS.incorrectIcsCalendar+s);return t.search("SUMMARY:No task.")>0?[]:this.parseIcsStringIntoEvents(t)}getGoogleAppsScriptsObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return PropertiesService.getScriptProperties()}getAppsScriptsProperties(){return this.getGoogleAppsScriptsObject().getKeys()}getAppsScriptsProperty(e){return this.getGoogleAppsScriptsObject().getProperty(e)}updateAppsScriptsProperty(e,t){this.getGoogleAppsScriptsObject().setProperty(e,t)}removeAppsScriptsProperty(e){this.getGoogleAppsScriptsObject().deleteProperty(e)}getGoogleFetch(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return UrlFetchApp}getGoogleAppsScriptsTriggerObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return ScriptApp}getAppsScriptsTriggers(){return this.getGoogleAppsScriptsTriggerObj().getProjectTriggers()}addAppsScriptsTrigger(e,t){this.getGoogleAppsScriptsTriggerObj().newTrigger(e).timeBased().everyMinutes(t).create()}removeAppsScriptsTrigger(e){const t=this.getAppsScriptsTriggers().find((t=>t.getHandlerFunction()===e));t&&this.getGoogleAppsScriptsTriggerObj().deleteTrigger(t)}getGoogleCalendarObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Calendar}getAllCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items}getAllOwnedCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items.filter((e=>"owner"===e.accessRole))}getCalendarByName(e){return this.getAllCalendars().find((t=>t.summary===e))}deleteCalendar(e){const t=this.getGoogleCalendarObj(),s=this.getCalendarByName(e);s&&(t.Calendars.remove(s.id),this.logger(`deleted calendar ${s.summary}`))}createCalendar(e){const t=this.getGoogleCalendarObj();if(this.getAllOwnedCalendars().map((e=>e.summary)).includes(e))throw new Error(`calendar ${e} already exists!`);const s=t.newCalendar();s.summary=e,s.timeZone=t.Settings.get("timezone").value;return t.Calendars.insert(s)}getEventsFromCalendar(e){return this.getGoogleCalendarObj().Events.list(e.id,{}).items.map((e=>this.parseGoogleEvent(e)))}parseGoogleEvent(e){var t,s,i,n,r;return{id:e.id,summary:e.summary,description:null!==(t=e.description)&&void 0!==t?t:"",htmlLink:e.htmlLink,attendees:null!==(s=e.attendees)&&void 0!==s?s:[],reminders:null!==(i=e.reminders)&&void 0!==i?i:{},visibility:null!==(n=e.visibility)&&void 0!==n?n:"default",start:e.start,end:e.end,created:e.created,updated:e.updated,extendedProperties:null!==(r=e.extendedProperties)&&void 0!==r?r:{}}}addEventToCalendar(e,t){return this.getGoogleCalendarObj().Events.insert(t,e.id)}updateEventFromCalendar(e,t,s){const i=this.getEventById(e,t.id),n=Object.assign(Object.assign({},i),s);this.getGoogleCalendarObj().Events.update(n,e.id,t.id)}moveEventToOtherCalendar(e,t,s){this.getGoogleCalendarObj().Events.move(e.id,t.id,s.id)}getEventById(e,t){return this.getGoogleCalendarObj().Events.get(e.id,t)}getGoogleEmailObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return MailApp}sendEmail(e){this.getGoogleEmailObj().sendEmail(e)}installGcalSync(){this.removeAppsScriptsTrigger(this.config.ticktickSync.syncFunction),this.addAppsScriptsTrigger(this.config.ticktickSync.syncFunction,this.config.ticktickSync.updateFrequency),this.logger(`${this.APPNAME} was set to run ${this.config.ticktickSync.syncFunction} every ${this.config.ticktickSync.updateFrequency} minutes`)}uninstallGcalSync(){this.removeAppsScriptsTrigger(this.config.ticktickSync.syncFunction),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted),this.logger(`${this.APPNAME} automation was removed from appscript!`)}cleanTodayEventsStats(){this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents,""),this.logger(`${this.TODAY_DATE} stats were reseted!`)}showTodayEventsStats(){const e=e=>e.split("\n").filter((e=>e.length>0)),t=e=>this.formatSummary(e.split("\n").filter((e=>e.length>0)).map((e=>`- ${e}`)).join("\n"));this.logger(`stats for ${this.TODAY_DATE}`);const s=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents),i=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents),n=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents);this.logger(`addedEvents: ${e(s).length}${e(s).length>0?`\n\n${t(s)}`:""}`),this.logger(`updatedEvents: ${e(i).length}${e(i).length>0?`\n\n${t(i)}`:""}`),this.logger(`completedEvents: ${e(n).length}${e(n).length>0?`\n\n${t(n)}`:""}`)}syncGihub(){if(!this.config.options.syncGithub)return;this.getCalendarByName(this.config.githubSync.googleCalendar)||(this.createCalendar(this.config.githubSync.googleCalendar),this.logger(`created google calendar: [${this.config.githubSync.googleCalendar}]`));const e={addedCommits:[],deletedCommits:[]},t=this.getCalendarByName(this.config.githubSync.googleCalendar),s=this.getEventsFromCalendar(t),i=this.getAllGithubCommits().map((e=>({commit:e.html_url,date:e.commit.author.date,message:e.commit.message.split("\n")[0],repository:e.commit.tree.url.replace("https://api.github.com/repos/","").split("/git")[0]}))).filter((e=>e.repository.search(this.config.githubSync.username)>-1));return i.forEach((i=>{if(!s.find((e=>e.extendedProperties.private.githubCommitId===i.commit))){const s={private:{githubCommitRepository:i.repository,githubCommitMessage:i.message,githubCommitDate:i.date,githubCommitId:i.commit}},n={summary:`${i.repository} - ${i.message}`,description:i.repository,start:{dateTime:i.date},end:{dateTime:i.date},reminders:{useDefault:!1,overrides:[]},extendedProperties:s};this.addEventToCalendar(t,n),this.logger(`add commit to gcal: ${i.repository} - ${i.commit}`),e.addedCommits.push(i)}})),this.getEventsFromCalendar(t).forEach((t=>{i.find((e=>e.commit===t.extendedProperties.private.githubCommitId))||(console.log(`commit ${t.extendedProperties.private.githubCommitId} was deleted`),e.addedCommits.push(t.extendedProperties.private))})),e}getAllGithubCommits(){var e;const t=[];let s=1,i=!1;for(;!1===i;){const n=`https://api.github.com/search/commits?q=author:${this.config.githubSync.username}&page=${s}&sort=committer-date&per_page=100`,r=this.getGoogleFetch().fetch(n),a=(null!==(e=JSON.parse(r.getContentText()))&&void 0!==e?e:{}).items;if(0===a.length){i=!0;break}t.push(...a),s++}return t}syncTicktick(){if(!this.config.options.syncTicktick)return;this.createMissingGoogleCalendars(),this.createMissingAppsScriptsProperties();const e=this.getTasksFromGoogleCalendars(),t=this.config.ticktickSync.icsCalendars.filter((e=>{var t;return"string"==typeof(null===(t=e[3])||void 0===t?void 0:t.tag)})).map((t=>this.checkCalendarItem(t,e))),s=this.parseResults(t),i=this.config.ticktickSync.icsCalendars.filter((e=>!e[3]||e[3]&&!e[3].tag)).map((s=>this.checkCalendarItem(s,e,t))),n=this.parseResults(i),r={addedEvents:[],updatedEvents:[],completedEvents:[]},a=[...s.taggedIcsTasks,...n.taggedIcsTasks];r.completedEvents=this.checkCalendarCompletedTasks(e,a),r.addedEvents=[...s.added,...n.added],r.updatedEvents=[...s.updated,...n.updated];const o=r.addedEvents.length,d=r.updatedEvents.length,c=r.completedEvents.length;if(this.logger(`addedEvents: ${o}`),this.logger(`updatedEvents: ${d}`),this.logger(`completedEvents: ${c}`),o+d+c>0){const e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents),t=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents),s=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents);this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents,`${e?e+"\n":""}${r.addedEvents.join("\n")}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents,`${t?t+"\n":""}${r.updatedEvents.join("\n")}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents,`${s?s+"\n":""}${r.completedEvents.join("\n")}`),this.config.notifications.emailSession&&this.emailSession(r),this.logger("adding session events to today stats")}this.isCurrentTimeAfter(this.config.notifications.timeToEmail)&&(this.config.notifications.emailDailySummary&&this.sendSummaryEmail(),this.config.notifications.emailNewRelease&&this.sendNewReleaseEmail())}createMissingGoogleCalendars(){[...new Set([...this.config.ticktickSync.icsCalendars.map((e=>e[1])),...this.config.ticktickSync.icsCalendars.map((e=>e[2]))])].forEach((e=>{this.getCalendarByName(e)||(this.createCalendar(e),this.logger(`created google calendar: [${e}]`))}))}createMissingAppsScriptsProperties(){this.getAppsScriptsProperties().includes(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents)||(this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents,""))}getTasksFromGoogleCalendars(){return this.config.ticktickSync.icsCalendars.reduce(((e,t)=>{const s=t[1],i=this.getCalendarByName(s),n=this.getEventsFromCalendar(i);return e=[].concat.apply(e,n)}),[])}checkCalendarItem(e,t,s){const[i,n,r,a]=e;let o=this.getEventsFromIcsCalendar(i);a.ignoredTags&&s&&a.ignoredTags.forEach((e=>{const t=s.find((t=>t.calendarOptions.tag===e));if(t){const e=t.tasksFromIcs.map((e=>e.id));o=o.filter((t=>!1===e.includes(t.id)))}}));const[d,c]=this.checkTicktickAddedAndUpdatedTasks(e,o,t);return{icsCal:i,gCalCorresponding:n,completedCal:r,calendarOptions:a,tasksFromIcs:o,addedTasks:d,updatedTasks:c}}checkTicktickAddedAndUpdatedTasks(e,t,s){const[i,n,r,a]=e,o=[],d=[],c=this.getCalendarByName(n);return t.forEach((e=>{if(s.map((e=>e.extendedProperties.private.tickTaskId)).includes(e.id)){const t=s.find((t=>t.extendedProperties.private.tickTaskId===e.id)),i=e.name!==t.summary,n=e.description!==t.description,r=Object.keys(e.start).length!==Object.keys(t.start).length,a=e.start.date!==t.start.date,o=e.start.dateTime!==t.start.dateTime;if(i||n||r||a||o){const s={summary:e.name,description:e.description,start:e.start,end:e.end};this.config.options.maintanceMode||this.updateEventFromCalendar(c,t,s);const i=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${c.summary} | ${e.name}`;d.push(i),this.logger(`gcal event was updated  : ${i}`)}}else{const t={private:{tickTaskId:e.id,calendar:n,completedCalendar:r}},s={summary:e.name,description:e.description,start:e.start,end:e.end,reminders:{useDefault:!0},extendedProperties:t};this.config.options.maintanceMode||this.addEventToCalendar(c,s);const i=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${c.summary} | ${e.name}`;o.push(i),this.logger(`added event to gcal     : ${i}`)}})),[o,d]}checkCalendarCompletedTasks(e,t){const s=[];return e.filter((e=>e.extendedProperties.private.tickTaskId)).forEach((e=>{if(!t.map((e=>e.id)).includes(e.extendedProperties.private.tickTaskId)){const t=this.getCalendarByName(e.extendedProperties.private.calendar),i=this.getCalendarByName(e.extendedProperties.private.completedCalendar);this.config.options.maintanceMode||this.moveEventToOtherCalendar(t,e,i);const n=`${e.start.date?e.start.date:e.start.dateTime.split("T")[0]} | ${e.extendedProperties.private.calendar} | ${e.summary}`;s.push(n),this.logger(`gcal event was completed: ${n}`)}})),s}parseResults(e){return e.reduce(((e,t)=>(e.added||(e.added=[],e.updated=[],e.taggedIcsTasks=[]),e.added.push(...t.addedTasks),e.updated.push(...t.updatedTasks),e.taggedIcsTasks.push(...t.tasksFromIcs),e)),{})}sendNewReleaseEmail(){var e,t;const s=null!==(e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted))&&void 0!==e?e:"",i=e=>Number(e.replace("v","").split(".").join("")),n=this.getGoogleFetch().fetch(`https://api.github.com/repos/${this.GITHUB_REPOSITORY}/releases?per_page=1`),r=null!==(t=JSON.parse(n.getContentText())[0])&&void 0!==t?t:{};if(0===Object.keys(r).length)return;const a=i(r.tag_name);if(a>i(this.VERSION)&&a.toString()!=s){const e=`Hi!\n      <br/><br/>\n      a new <a href="https://github.com/${this.GITHUB_REPOSITORY}">${this.APPNAME}</a> version is available: <br/>\n      <ul>\n        <li>new version: ${r.tag_name}</li>\n        <li>published at: ${r.published_at}</li>\n      </ul>\n      you can check details <a href="https://github.com/${this.GITHUB_REPOSITORY}/releases">here</a>.\n      `,t={to:this.config.notifications.email,name:`${this.APPNAME} bot`,subject:`new ${this.APPNAME} version [${r.tag_name}] was released!`,htmlBody:e};this.sendEmail(t),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted,a.toString()),this.logger(`a new release email was sent to ${this.config.notifications.email}`)}}emailSession(e){const t=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length;let s="";s=`Hi!<br/><br/>${this.APPNAME} made ${t} changes to your calendar:<br/><br/>\n`;const i=e.addedEvents.map((e=>`<li>${e}</li>`)),n=e.updatedEvents.map((e=>`<li>${e}</li>`)),r=e.completedEvents.map((e=>`<li>${e}</li>`));s+=i.length>0?`added events: ${i.length}<br/> \n <ul>\n${i.join("\n")}</ul>\n`:"",s+=n.length>0?`updated events: ${n.length}<br/> \n <ul>\n${n.join("\n")}</ul>\n`:"",s+=r.length>0?`completed events: ${r.length}<br/> \n <ul>\n${r.join("\n")}</ul>\n`:"",s+=`If you want to share feedback, please contact us at <a href='https://github.com/${this.GITHUB_REPOSITORY}'>github</a>.`;const a={to:this.config.notifications.email,name:`${this.APPNAME} bot`,subject:`${this.APPNAME} session of ${this.TODAY_DATE} - ${t} modifications`,htmlBody:s};this.sendEmail(a),this.logger(`session email was sent to ${this.config.notifications.email}`)}sendSummaryEmail(){const e=e=>e.split("\n").filter((e=>e.length>0)),t=e(this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayAddedEvents)),s=e(this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayUpdateEvents)),i=e(this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayCompletedEvents));if(t.length+s.length+i.length>0){const e={addedEvents:t,updatedEvents:s,completedEvents:i},n=e.addedEvents.length+e.updatedEvents.length+e.completedEvents.length,r=0===e.addedEvents.length?[]:this.formatSummary(e.addedEvents.join("\n")).split("\n"),a=0===e.updatedEvents.length?[]:this.formatSummary(e.updatedEvents.join("\n")).split("\n"),o=0===e.completedEvents.length?[]:this.formatSummary(e.completedEvents.join("\n")).split("\n");let d="";d=`Hi!<br/><br/>${this.APPNAME} made ${n} changes to your calendar:<br/><br/>\n`;const c=r.map((e=>`<li>${e}</li>`)),l=a.map((e=>`<li>${e}</li>`)),p=o.map((e=>`<li>${e}</li>`));d+=c.length>0?`added events: ${c.length}<br/> \n <ul>\n${c.join("\n")}</ul>\n`:"",d+=l.length>0?`updated events: ${l.length}<br/> \n <ul>\n${l.join("\n")}</ul>\n`:"",d+=p.length>0?`completed events: ${p.length}<br/> \n <ul>\n${p.join("\n")}</ul>\n`:"",d+=`If you want to share feedback, please contact us at <a href='https://github.com/${this.GITHUB_REPOSITORY}'>github</a>.`;const h={to:this.config.notifications.email,name:`${this.APPNAME} bot`,subject:`${this.APPNAME} daily summary for ${this.TODAY_DATE} - ${n} modifications`,htmlBody:d};this.sendEmail(h),this.logger(`summary email was sent to ${this.config.notifications.email}`),this.cleanTodayEventsStats()}}formatSummary(e){if(""===e||!e)return"";const t=e.split("\n").map((e=>e.split(" | "))).sort(((e,t)=>Number(new Date(e[0]))-Number(new Date(t[0])))),s=Math.max(...t.map((e=>e[1].length)));return t.map((e=>{const[t,i,n]=e,r=s-i.length;return[t,0===r?i:i+"_".repeat(r),n]})).map((e=>e.join(" | "))).join("\n")}}