class GcalSync{constructor(t){this.VERSION="1.2.4",this.APPNAME="gcal-sync",this.GITHUB_REPOSITORY="lucasvtiradentes/gcal-sync",this.TODAY_DATE=(new Date).toISOString().split("T")[0],this.ENVIRONMENT=this.detectEnvironment(),this.APPS_SCRIPTS_PROPERTIES={todayTicktickAddedTasks:"todayTicktickAddedTasks",todayTicktickUpdateTasks:"todayTicktickUpdateTasks",todayTicktickCompletedTasks:"todayTicktickCompletedTasks",todayGithubAddedCommits:"todayGithubAddedCommits",todayGithubDeletedCommits:"todayGithubDeletedCommits",lastReleasedVersionAlerted:"lastReleasedVersionAlerted"},this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class",incorrectIcsCalendar:"The provided ics/ical URL is incorrect: ",httpsError:"There was a HTTP error when accessing: "},this.validateConfigs(t),this.config=t,this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(t){if(!t)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:t,requiredKeys:["ticktickSync","githubSync","notifications","options"],name:"configs"},{objToCheck:t.ticktickSync,requiredKeys:["icsCalendars","syncTicktick"],name:"configs.ticktickSync"},{objToCheck:t.githubSync,requiredKeys:["username","googleCalendar","syncGithub","parseGithubEmojis"],name:"configs.githubSync"},{objToCheck:t.notifications,requiredKeys:["email","timeToEmail","timeZoneCorrection","emailNewRelease","emailDailySummary","emailSession"],name:"configs.notifications"},{objToCheck:t.options,requiredKeys:["syncFunction","updateFrequency","showLogs","maintanceMode"],name:"configs.options"}].forEach((t=>{const{objToCheck:e,requiredKeys:i,name:s}=t;i.forEach((t=>{if(!e||!Object.keys(e).includes(t))throw new Error(`missing key in ${s}: ${t}`)}))}))}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(t){this.config.options.showLogs&&console.log(t)}getStrBetween(t,e,i){const s=t.slice(t.search(e)).replace(e,"");return s.slice(0,s.search(i))}getParsedTimeStamp(t){const e=t.split("T");return{year:e[0].substring(0,4),month:e[0].substring(4,6),day:e[0].substring(6,8),hours:e[1]?e[1].substring(0,2):"00",minutes:e[1]?e[1].substring(2,4):"00",seconds:e[1]?e[1].substring(4,6):"00"}}getDateFixedByTimezone(t){const e=new Date;return e.setHours(e.getHours()+t),e}isCurrentTimeAfter(t){const e=this.getDateFixedByTimezone(this.config.notifications.timeZoneCorrection),i=60*Number(e.getHours())+Number(e.getMinutes()),s=t.split(":");return i>=60*Number(s[0])+Number(s[1])}getIcsCalendarStr(t){let e="";const i=t.replace("webcal://","https://"),s=this.getGoogleFetch().fetch(i,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!=s.getResponseCode())throw new Error(this.ERRORS.httpsError+i);if(e=s.getContentText(),-1===e.search("BEGIN:VCALENDAR"))throw new Error(this.ERRORS.incorrectIcsCalendar+i);return e}getIcsEvents(t){return t.split("BEGIN:VEVENT\r\n").filter((t=>t.search("SUMMARY")>-1)).reduce(((t,e)=>{const i=e.split("BEGIN:VALARM\r\n");return[...t,{DSTAMP:this.getStrBetween(e,"DTSTAMP:","\r\n"),DTSTART:this.getStrBetween(e,"DTSTART;","\r\n"),DTEND:this.getStrBetween(e,"DTEND;","\r\n"),SUMMARY:this.getStrBetween(e,"SUMMARY:","\r\n"),UID:this.getStrBetween(e,"UID:","\r\n"),DESCRIPTION:this.getStrBetween(e,"DESCRIPTION:","\r\n"),SEQUENCE:this.getStrBetween(e,"SEQUENCE:","\r\n"),TZID:this.getStrBetween(e,"TZID:","\r\n"),ALARM_TRIGGER:1===i.length?"":this.getStrBetween(i[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===i.length?"":this.getStrBetween(i[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===i.length?"":this.getStrBetween(i[1],"DESCRIPTION:","\r\n")}]}),[])}getParsedIcsDatetimes(t,e,i){let s=t,r=e;if(s=s.slice(s.search(":")+1),r=r.slice(r.search(":")+1),""===r){const t=this.getParsedTimeStamp(s),e=new Date(Date.UTC(Number(t.year),Number(t.month)-1,Number(t.day),0,0,0));e.setDate(e.getDate()+1),r={date:e.toISOString().split("T")[0]},s={date:`${t.year}-${t.month}-${t.day}`}}else{const t=this.getParsedTimeStamp(s),e=this.getParsedTimeStamp(r);s={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:i},r={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:i}}return{finalDtstart:s,finalDtend:r}}parseIcsEvents(t){return t.reduce(((t,e)=>{const i=this.getParsedIcsDatetimes(e.DTSTART,e.DTEND,e.TZID);return[...t,{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:i.finalDtstart,end:i.finalDtend}]}),[])}getEventsFromIcsCalendar(t){const e=this.getIcsCalendarStr(t),i=e.search("SUMMARY:No task.")>0?[]:this.getIcsEvents(e);return this.parseIcsEvents(i)}getGoogleAppsScriptsObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return PropertiesService.getScriptProperties()}getAppsScriptsProperties(){return this.getGoogleAppsScriptsObject().getKeys()}getAppsScriptsProperty(t){return this.getGoogleAppsScriptsObject().getProperty(t)}updateAppsScriptsProperty(t,e){this.getGoogleAppsScriptsObject().setProperty(t,e)}removeAppsScriptsProperty(t){this.getGoogleAppsScriptsObject().deleteProperty(t)}getGoogleFetch(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return UrlFetchApp}getGoogleAppsScriptsTriggerObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return ScriptApp}getAppsScriptsTriggers(){return this.getGoogleAppsScriptsTriggerObj().getProjectTriggers()}addAppsScriptsTrigger(t,e){this.getGoogleAppsScriptsTriggerObj().newTrigger(t).timeBased().everyMinutes(e).create()}removeAppsScriptsTrigger(t){const e=this.getAppsScriptsTriggers().find((e=>e.getHandlerFunction()===t));e&&this.getGoogleAppsScriptsTriggerObj().deleteTrigger(e)}getGoogleCalendarObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Calendar}getAllCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items}getAllOwnedCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items.filter((t=>"owner"===t.accessRole))}getCalendarByName(t){return this.getAllCalendars().find((e=>e.summary===t))}createCalendar(t){const e=this.getGoogleCalendarObj();if(this.getAllOwnedCalendars().map((t=>t.summary)).includes(t))throw new Error(`calendar ${t} already exists!`);const i=e.newCalendar();i.summary=t,i.timeZone=e.Settings.get("timezone").value;return e.Calendars.insert(i)}deleteCalendar(t){const e=this.getGoogleCalendarObj(),i=this.getCalendarByName(t);i&&(e.Calendars.remove(i.id),this.logger(`deleted calendar ${i.summary}`))}getEventsFromCalendar(t){return this.getGoogleCalendarObj().Events.list(t.id,{}).items.map((t=>this.parseGoogleEvent(t)))}parseGoogleEvent(t){var e,i,s,r,n;return{id:t.id,summary:t.summary,description:null!==(e=t.description)&&void 0!==e?e:"",htmlLink:t.htmlLink,attendees:null!==(i=t.attendees)&&void 0!==i?i:[],reminders:null!==(s=t.reminders)&&void 0!==s?s:{},visibility:null!==(r=t.visibility)&&void 0!==r?r:"default",start:t.start,end:t.end,created:t.created,updated:t.updated,extendedProperties:null!==(n=t.extendedProperties)&&void 0!==n?n:{}}}addEventToCalendar(t,e){return this.getGoogleCalendarObj().Events.insert(e,t.id)}updateEventFromCalendar(t,e,i){const s=this.getEventById(t,e.id),r=Object.assign(Object.assign({},s),i);this.getGoogleCalendarObj().Events.update(r,t.id,e.id)}moveEventToOtherCalendar(t,e,i){this.getGoogleCalendarObj().Events.move(t.id,e.id,i.id)}removeCalendarEvent(t,e){this.getGoogleCalendarObj().Events.remove(t.id,e.id)}getEventById(t,e){return this.getGoogleCalendarObj().Events.get(t.id,e)}getGoogleEmailObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return MailApp}sendEmail(t){this.getGoogleEmailObj().sendEmail(t)}installGcalSync(){this.removeAppsScriptsTrigger(this.config.options.syncFunction),this.addAppsScriptsTrigger(this.config.options.syncFunction,this.config.options.updateFrequency),this.logger(`${this.APPNAME} was set to run ${this.config.options.syncFunction} every ${this.config.options.updateFrequency} minutes`)}uninstallGcalSync(){this.removeAppsScriptsTrigger(this.config.options.syncFunction),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted),this.logger(`${this.APPNAME} automation was removed from appscript!`)}cleanTodayEventsStats(){this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits,""),this.logger(`${this.TODAY_DATE} stats were reseted!`)}showTodayEventsStats(){const t=t=>t.split("\n").filter((t=>t.length>0)).map((t=>`- ${t}`)).join("\n"),e=this.getTodayEvents();this.logger(`stats for ${this.TODAY_DATE}`),this.logger(`ticktick sync - added tasks    : ${this.stringToArray(e.addedTicktickTasks).length}${this.stringToArray(e.addedTicktickTasks).length>0?`\n\n${t(e.addedTicktickTasks)}`:""}`),this.logger(`ticktick sync - updated tasks  : ${this.stringToArray(e.updatedTicktickTasks).length}${this.stringToArray(e.updatedTicktickTasks).length>0?`\n\n${t(e.updatedTicktickTasks)}`:""}`),this.logger(`ticktick sync - completed tasks: ${this.stringToArray(e.completedTicktickTasks).length}${this.stringToArray(e.completedTicktickTasks).length>0?`\n\n${t(e.completedTicktickTasks)}`:""}`),this.logger(`github sync   - added commmits : ${this.stringToArray(e.addedGithubCommits).length}${this.stringToArray(e.addedGithubCommits).length>0?`\n\n${t(e.addedGithubCommits)}`:""}`),this.logger(`github sync   - deleted commits: ${this.stringToArray(e.deletedGithubCommits).length}${this.stringToArray(e.deletedGithubCommits).length>0?`\n\n${t(e.deletedGithubCommits)}`:""}`)}getTodayEvents(){return{addedGithubCommits:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),addedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),completedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),deletedGithubCommits:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),updatedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks)}}sync(){const t=this.syncTicktick(),e=t.addedEvents.length,i=t.updatedEvents.length,s=t.completedEvents.length;this.config.ticktickSync.syncTicktick&&(this.logger(`ticktick sync - added tasks    : ${e}`),this.logger(`ticktick sync - updated tasks  : ${i}`),this.logger(`ticktick sync - completed tasks: ${s}`));const r=this.syncGihub(),n=r.addedCommits.length,a=r.deletedCommits.length;this.config.githubSync.syncGithub&&(this.logger(`github sync   - added commits  : ${n}`),this.logger(`github sync   - deleted commits: ${a}`));const o={addedTicktickTasks:"",updatedTicktickTasks:"",completedTicktickTasks:"",addedGithubCommits:"",deletedGithubCommits:""};if(e+i+s>0){const e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),i=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks),s=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),r=t=>`${t.start.date?t.start.date:t.start.dateTime.split("T")[0]} | ${t.extendedProperties.private.calendar} | ${t.summary}`;o.addedTicktickTasks=t.addedEvents.map((t=>r(t))).join("\n"),o.updatedTicktickTasks=t.updatedEvents.map((t=>r(t))).join("\n"),o.completedTicktickTasks=t.completedEvents.map((t=>r(t))).join("\n"),this.config.options.maintanceMode||(this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks,`${e?e+"\n":""}${o.addedTicktickTasks}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks,`${i?i+"\n":""}${o.updatedTicktickTasks}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks,`${s?s+"\n":""}${o.completedTicktickTasks}`))}if(n+a>0){const t=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),i=t=>`${t.commitDate.split("T")[0]} | ${t.commitRepository.replace(`${this.config.githubSync.username}/`,"")} | ${this.config.githubSync.parseGithubEmojis?this.parseGithubEmojisString(t.commitMessage):t.commitMessage}`;o.addedGithubCommits=r.addedCommits.map((t=>i(t))).join("\n"),o.deletedGithubCommits=r.deletedCommits.map((t=>i(t))).join("\n"),this.config.options.maintanceMode||(this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits,`${t?t+"\n":""}${o.addedGithubCommits}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits,`${e?e+"\n":""}${o.deletedGithubCommits}`))}this.config.options.maintanceMode||(this.config.notifications.emailSession&&this.sendSessionEmail(o),this.isCurrentTimeAfter(this.config.notifications.timeToEmail)&&(this.config.notifications.emailDailySummary&&this.sendDailySummaryEmail(this.getTodayEvents()),this.config.notifications.emailNewRelease&&this.sendNewReleaseEmail()))}syncGihub(){const t={addedCommits:[],deletedCommits:[]};if(!this.config.githubSync.syncGithub)return t;this.getCalendarByName(this.config.githubSync.googleCalendar)||(this.createCalendar(this.config.githubSync.googleCalendar),this.logger(`created google calendar: [${this.config.githubSync.googleCalendar}]`));const e=this.getCalendarByName(this.config.githubSync.googleCalendar),i=this.getEventsFromCalendar(e),s=this.getAllGithubCommits().map((t=>({commitUrl:t.html_url,commitRepository:t.commit.tree.url.replace("https://api.github.com/repos/","").split("/git")[0],commitMessage:t.commit.message.split("\n")[0],commitDate:t.commit.author.date}))).filter((t=>t.commitRepository.search(this.config.githubSync.username)>-1));return s.forEach((s=>{const r=i.find((t=>t.extendedProperties.private.commitUrl===s.commitUrl)),n=s.commitRepository.replace(`${this.config.githubSync.username}/`,""),a=this.config.githubSync.parseGithubEmojis?this.parseGithubEmojisString(s.commitMessage):s.commitMessage;if(!r){const i={commitUrl:s.commitUrl,commitRepository:s.commitRepository,commitMessage:a,commitDate:s.commitDate},r={summary:`${n} - ${a}`,description:`repository: https://github.com/${s.commitRepository}\ncommit: ${s.commitUrl}`,start:{dateTime:s.commitDate},end:{dateTime:s.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:{private:i}};this.config.options.maintanceMode||(this.addEventToCalendar(e,r),t.addedCommits.push(s)),this.logger(`add commit to gcal: ${n} - ${a}`)}})),this.getEventsFromCalendar(e).forEach((i=>{s.find((t=>t.commitUrl===i.extendedProperties.private.commitUrl))||(this.config.options.maintanceMode||(this.removeCalendarEvent(e,i),t.addedCommits.push(i.extendedProperties.private)),this.logger(`commit ${i.extendedProperties.private.commitUrl} was deleted`))})),t}getAllGithubCommits(){var t;const e=[];let i=1,s=!1;for(;!1===s;){const r=`https://api.github.com/search/commits?q=author:${this.config.githubSync.username}&page=${i}&sort=committer-date&per_page=100`,n=this.getGoogleFetch().fetch(r),a=(null!==(t=JSON.parse(n.getContentText()))&&void 0!==t?t:{}).items;if(0===a.length){s=!0;break}e.push(...a),i++}return e}parseGithubEmojisString(t){const e={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let i=t;for(const[t,s]of Object.entries(e))i=i.replace(t,s);return i}syncTicktick(){const t={addedEvents:[],updatedEvents:[],completedEvents:[]};if(!this.config.ticktickSync.syncTicktick)return t;this.createMissingGoogleCalendars(),this.createMissingAppsScriptsProperties();const e=this.getTasksFromGoogleCalendars(),i=this.config.ticktickSync.icsCalendars.filter((t=>{var e;return"string"==typeof(null===(e=t[3])||void 0===e?void 0:e.tag)})).map((t=>this.checkCalendarItem(t,e))),s=this.parseResults(i),r=this.config.ticktickSync.icsCalendars.filter((t=>!t[3]||t[3]&&!t[3].tag)).map((t=>this.checkCalendarItem(t,e,i))),n=this.parseResults(r),a=[...s.taggedIcsTasks,...n.taggedIcsTasks];return t.completedEvents=this.checkCalendarCompletedTasks(e,a),t.addedEvents=[...s.added,...n.added],t.updatedEvents=[...s.updated,...n.updated],t}createMissingGoogleCalendars(){[...new Set([...this.config.ticktickSync.icsCalendars.map((t=>t[1])),...this.config.ticktickSync.icsCalendars.map((t=>t[2]))])].forEach((t=>{this.getCalendarByName(t)||(this.createCalendar(t),this.logger(`created google calendar: [${t}]`))}))}createMissingAppsScriptsProperties(){this.getAppsScriptsProperties().includes(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks)||(this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks,""))}getTasksFromGoogleCalendars(){return this.config.ticktickSync.icsCalendars.reduce(((t,e)=>{const i=e[1],s=this.getCalendarByName(i),r=this.getEventsFromCalendar(s);return t=[].concat.apply(t,r)}),[])}checkCalendarItem(t,e,i){const[s,r,n,a]=t;let o=this.getEventsFromIcsCalendar(s);a.ignoredTags&&i&&a.ignoredTags.forEach((t=>{const e=i.find((e=>e.calendarOptions.tag===t));if(e){const t=e.tasksFromIcs.map((t=>t.id));o=o.filter((e=>!1===t.includes(e.id)))}}));const[d,c]=this.checkTicktickAddedAndUpdatedTasks(t,o,e);return{icsCal:s,gCalCorresponding:r,completedCal:n,calendarOptions:a,tasksFromIcs:o,addedTasks:d,updatedTasks:c}}checkTicktickAddedAndUpdatedTasks(t,e,i){const[s,r,n,a]=t,o=[],d=[],c=this.getCalendarByName(r);return e.forEach((t=>{if(i.find((e=>e.extendedProperties.private.tickTaskId===t.id))){const e=i.find((e=>e.extendedProperties.private.tickTaskId===t.id)),s=t.name!==e.summary,r=Object.keys(t.start).length!==Object.keys(e.start).length,n=t.start.date!==e.start.date||t.start.dateTime!==e.start.dateTime,a=t.end.date!==e.end.date||t.end.dateTime!==e.end.dateTime;if(s||r||n||a){const i={summary:t.name,description:t.description,start:t.start,end:t.end};this.config.options.maintanceMode||this.updateEventFromCalendar(c,e,i);const s=Object.assign(Object.assign({},e),i);d.push(s),this.logger(`ticktick task was updated: ${s.summary}`)}}else{const e={tickTaskId:t.id,calendar:r,completedCalendar:n},i={summary:t.name,description:`task: https://ticktick.com/webapp/#q/all/tasks/${t.id.split("@")[0]}\ndescription: ${t.description}`,start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:{private:e}};this.config.options.maintanceMode||this.addEventToCalendar(c,i),o.push(i),this.logger(`ticktick task was added to gcal: ${i.summary}`)}})),[o,d]}checkCalendarCompletedTasks(t,e){const i=[];return t.filter((t=>t.extendedProperties.private.tickTaskId)).forEach((t=>{if(!e.map((t=>t.id)).includes(t.extendedProperties.private.tickTaskId)){const e=this.getCalendarByName(t.extendedProperties.private.calendar),s=this.getCalendarByName(t.extendedProperties.private.completedCalendar);this.config.options.maintanceMode||this.moveEventToOtherCalendar(e,t,s),i.push(t),this.logger(`ticktick task was completed: ${t.summary}`)}})),i}parseResults(t){return t.reduce(((t,e)=>(t.added||(t.added=[],t.updated=[],t.taggedIcsTasks=[]),t.added.push(...e.addedTasks),t.updated.push(...e.updatedTasks),t.taggedIcsTasks.push(...e.tasksFromIcs),t)),{})}sendNewReleaseEmail(){var t,e;const i=null!==(t=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted))&&void 0!==t?t:"",s=t=>Number(t.replace("v","").split(".").join("")),r=this.getGoogleFetch().fetch(`https://api.github.com/repos/${this.GITHUB_REPOSITORY}/releases?per_page=1`),n=null!==(e=JSON.parse(r.getContentText())[0])&&void 0!==e?e:{};if(0===Object.keys(n).length)return;const a=s(n.tag_name);if(a>s(this.VERSION)&&a.toString()!=i){const t=`Hi!\n      <br/><br/>\n      a new <a href="https://github.com/${this.GITHUB_REPOSITORY}">${this.APPNAME}</a> version is available: <br/>\n      <ul>\n        <li>new version: ${n.tag_name}</li>\n        <li>published at: ${n.published_at}</li>\n      </ul>\n      you can check details <a href="https://github.com/${this.GITHUB_REPOSITORY}/releases">here</a>.\n      `,e={to:this.config.notifications.email,name:`${this.APPNAME}`,subject:`new version [${n.tag_name}] was released - ${this.APPNAME}`,htmlBody:t};this.sendEmail(e),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted,a.toString()),this.logger(`a new release email was sent to ${this.config.notifications.email}`)}}sendSessionEmail(t){const e=this.generateReportEmailContent(t);if(!e)return;const i={to:this.config.notifications.email,name:`${this.APPNAME}`,subject:`session report - ${this.getTotalSessionEvents(t)} modifications - ${this.APPNAME}`,htmlBody:e};this.sendEmail(i),this.logger(`session email was sent to ${this.config.notifications.email}`)}sendDailySummaryEmail(t){const e=this.generateReportEmailContent(t);if(!e)return;const i={to:this.config.notifications.email,name:`${this.APPNAME}`,subject:`daily report for ${this.TODAY_DATE} - ${this.getTotalSessionEvents(t)} modifications - ${this.APPNAME}`,htmlBody:e};this.sendEmail(i),this.logger(`summary email was sent to ${this.config.notifications.email}`),this.cleanTodayEventsStats()}generateReportEmailContent(t){const e=this.stringToArray(t.addedTicktickTasks),i=this.stringToArray(t.updatedTicktickTasks),s=this.stringToArray(t.completedTicktickTasks),r=this.stringToArray(t.addedGithubCommits),n=this.stringToArray(t.deletedGithubCommits),a=this.getTotalSessionEvents(t);if(0===a)return;const o='style="border: 1px solid #333; width: 90%"',d='style="width: 100%"',c='style="border: 1px solid #333"',h=t=>{if(!t||0===t.length)return"";return`${this.sortArrayByDate(t,0).map((t=>`<tr ${d}">\n${t.map((t=>`<td ${c}>&nbsp;&nbsp;${t}</td>`)).join("\n")}\n</tr>`)).join("\n")}`},l=`<tr ${d}">\n<th ${c} width="80px">date</th><th ${c} width="130px">calendar</th><th ${c} width="auto">task</th>\n</tr>`,p=`<tr ${d}">\n<th ${c} width="80px">date</th><th ${c} width="130px">repository</th><th ${c} width="auto">commit</th>\n</tr>`;let m="";return m=`Hi!<br/><br/>${this.APPNAME} made ${a} changes to your calendar:<br/>\n`,m+=e.length>0?`<br/>added ticktick events    : ${e.length}<br/><br/> \n <center>\n<table ${o}>\n${l}\n${h(e)}\n</table>\n</center>\n`:"",m+=i.length>0?`<br/>updated ticktick events  : ${i.length}<br/><br/> \n <center>\n<table ${o}>\n${l}\n${h(i)}\n</table>\n</center>\n`:"",m+=s.length>0?`<br/>completed ticktick events: ${s.length}<br/><br/> \n <center>\n<table ${o}>\n${l}\n${h(s)}\n</table>\n</center>\n`:"",m+=r.length>0?`<br/>added commits events     : ${r.length}<br/><br/> \n <center>\n<table ${o}>\n${p}\n${h(r)}\n</table>\n</center>\n`:"",m+=n.length>0?`<br/>removed commits events   : ${n.length}<br/><br/> \n <center>\n<table ${o}>\n${p}\n${h(n)}\n</table>\n</center>\n`:"",m+=`<br/>If you want to share feedback, please contact us at <a href='https://github.com/${this.GITHUB_REPOSITORY}'>github</a>.`,m}getTotalSessionEvents(t){return this.stringToArray(t.addedTicktickTasks).length+this.stringToArray(t.updatedTicktickTasks).length+this.stringToArray(t.completedTicktickTasks).length+this.stringToArray(t.addedGithubCommits).length+this.stringToArray(t.deletedGithubCommits).length}stringToArray(t){return t.split("\n").filter((t=>t.length>0))}sortArrayByDate(t,e){if(!t)return[];return t.map((t=>t.split(" | "))).sort(((t,i)=>Number(new Date(t[e]))-Number(new Date(i[e]))))}}