!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).GcalSync=e()}(this,(function(){"use strict";return class{constructor(t){this.VERSION="1.7.3",this.APPNAME="gcal-sync",this.GITHUB_REPOSITORY="lucasvtiradentes/gcal-sync",this.ENVIRONMENT=this.detectEnvironment(),this.TODAY_DATE="",this.SESSION_LOGS=[],this.USER_EMAIL="production"===this.ENVIRONMENT?this.getUserEmail():"",this.EVENTS_DIVIDER=" | ",this.GITHUB_REQUIRED_VALIDATIONS=3,this.APPS_SCRIPTS_PROPERTIES={lastReleasedVersionAlerted:"lastReleasedVersionAlerted",lastDailyEmailSentDate:"lastDailyEmailSentDate",todayTicktickAddedTasks:"todayTicktickAddedTasks",todayTicktickUpdateTasks:"todayTicktickUpdateTasks",todayTicktickCompletedTasks:"todayTicktickCompletedTasks",todayGithubAddedCommits:"todayGithubAddedCommits",todayGithubDeletedCommits:"todayGithubDeletedCommits",githubCommitChangesCount:"githubCommitChangesCount",githubLastAddedCommits:"githubLastAddedCommits",githubLastDeletedCommits:"githubLastDeletedCommits"},this.ERRORS={productionOnly:"This method cannot run in non-production environments",incorrectIcsCalendar:"The link you provided is not a valid ICS calendar: ",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: ",invalidGithubToken:"You provided an invalid github token",invalidGithubUsername:"You provided an invalid github username",abusiveGoogleCalendarApiUse:"Due to the numerous operations in the last few hours, the google api is not responding."},this.validateConfigs(t),this.config=t,this.TODAY_DATE=this.getDateFixedByTimezone(this.config.datetime.timeZoneCorrection).toISOString().split("T")[0],this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(t){if(!t)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:t,requiredKeys:["ticktickSync","githubSync","datetime","options","settings"],name:"configs"},{objToCheck:t.ticktickSync,requiredKeys:["icsCalendars"],name:"configs.ticktickSync"},{objToCheck:t.githubSync,requiredKeys:["username","googleCalendar","personalToken","ignoredRepos","parseGithubEmojis"],name:"configs.githubSync"},{objToCheck:t.datetime,requiredKeys:["dailyEmailsTime","timeZoneCorrection"],name:"configs.datetime"},{objToCheck:t.options,requiredKeys:["syncTicktick","syncGithub","showLogs","maintanceMode","emailNewRelease","emailDailySummary","emailSession","emailErrors"],name:"configs.options"},{objToCheck:t.settings,requiredKeys:["syncFunction","updateFrequency"],name:"config.settings"}].forEach((t=>{const{objToCheck:e,requiredKeys:s,name:i}=t;s.forEach((t=>{if(!e||!Object.keys(e).includes(t))throw new Error(`missing key in ${i}: ${t}`)}))}))}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(t){this.SESSION_LOGS.push(t),this.config.options.showLogs&&console.log(t)}getStrBetween(t,e,s){const i=t.slice(t.search(e)).replace(e,"");return i.slice(0,i.search(s))}getParsedTimeStamp(t){const e=t.split("T");return{year:e[0].substring(0,4),month:e[0].substring(4,6),day:e[0].substring(6,8),hours:e[1]?e[1].substring(0,2):"00",minutes:e[1]?e[1].substring(2,4):"00",seconds:e[1]?e[1].substring(4,6):"00"}}getDateFixedByTimezone(t){const e=new Date;return e.setHours(e.getHours()+t),e}isCurrentTimeAfter(t){const e=this.getDateFixedByTimezone(this.config.datetime.timeZoneCorrection),s=60*Number(e.getHours())+Number(e.getMinutes()),i=t.split(":");return s>=60*Number(i[0])+Number(i[1])}getIcsCalendarStr(t){const e=t.replace("webcal://","https://"),s=this.getGoogleFetch().fetch(e,{validateHttpsCertificates:!1,muteHttpExceptions:!0});if(200!==s.getResponseCode())throw new Error(this.ERRORS.httpsError+e);const i=s.getContentText()||"";if(-1===i.search("BEGIN:VCALENDAR"))throw new Error(this.ERRORS.incorrectIcsCalendar+e);return i}getIcsEvents(t){return t.split("BEGIN:VEVENT\r\n").filter((t=>t.search("SUMMARY")>-1)).reduce(((t,e)=>{const s=e.split("BEGIN:VALARM\r\n");return[...t,{DSTAMP:this.getStrBetween(e,"DTSTAMP:","\r\n"),DTSTART:this.getStrBetween(e,"DTSTART;","\r\n"),DTEND:this.getStrBetween(e,"DTEND;","\r\n"),SUMMARY:this.getStrBetween(e,"SUMMARY:","\r\n"),UID:this.getStrBetween(e,"UID:","\r\n"),DESCRIPTION:this.getStrBetween(e,"DESCRIPTION:","\r\n"),SEQUENCE:this.getStrBetween(e,"SEQUENCE:","\r\n"),TZID:this.getStrBetween(e,"TZID:","\r\n"),ALARM_TRIGGER:1===s.length?"":this.getStrBetween(s[1],"TRIGGER:","\r\n"),ALARM_ACTION:1===s.length?"":this.getStrBetween(s[1],"ACTION:","\r\n"),ALARM_DESCRIPTION:1===s.length?"":this.getStrBetween(s[1],"DESCRIPTION:","\r\n")}]}),[])}getParsedIcsDatetimes(t,e,s){let i=t,r=e;if(i=i.slice(i.search(":")+1),r=r.slice(r.search(":")+1),""===r){const t=this.getParsedTimeStamp(i),e=new Date(Date.UTC(Number(t.year),Number(t.month)-1,Number(t.day),0,0,0));e.setDate(e.getDate()+1),r={date:e.toISOString().split("T")[0]},i={date:`${t.year}-${t.month}-${t.day}`}}else{const t=this.getParsedTimeStamp(i),e=this.getParsedTimeStamp(r);i={dateTime:`${t.year}-${t.month}-${t.day}T${t.hours}:${t.minutes}:${t.seconds}-03:00`,timeZone:s},r={dateTime:`${e.year}-${e.month}-${e.day}T${e.hours}:${e.minutes}:${e.seconds}-03:00`,timeZone:s}}return{finalDtstart:i,finalDtend:r}}parseIcsEvents(t){return t.reduce(((t,e)=>{const s=this.getParsedIcsDatetimes(e.DTSTART,e.DTEND,e.TZID);return[...t,{id:e.UID,name:e.SUMMARY,description:e.DESCRIPTION,tzid:e.TZID,start:s.finalDtstart,end:s.finalDtend}]}),[])}getEventsFromIcsCalendar(t){const e=this.getIcsCalendarStr(t),s=e.search("SUMMARY:No task.")>0?[]:this.getIcsEvents(e);return this.parseIcsEvents(s)}getGoogleSessionObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Session}getUserEmail(){return this.getGoogleSessionObject().getActiveUser().getEmail()}getGoogleAppsScriptsObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return PropertiesService.getScriptProperties()}getAppsScriptsProperties(){return this.getGoogleAppsScriptsObject().getKeys()}getAppsScriptsProperty(t){return this.getGoogleAppsScriptsObject().getProperty(t)}updateAppsScriptsProperty(t,e){this.getGoogleAppsScriptsObject().setProperty(t,e)}removeAppsScriptsProperty(t){this.getGoogleAppsScriptsObject().deleteProperty(t)}getGoogleFetch(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return UrlFetchApp}getGoogleAppsScriptsTriggerObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return ScriptApp}getAppsScriptsTriggers(){return this.getGoogleAppsScriptsTriggerObj().getProjectTriggers()}addAppsScriptsTrigger(t,e){this.getGoogleAppsScriptsTriggerObj().newTrigger(t).timeBased().everyMinutes(e).create()}removeAppsScriptsTrigger(t){const e=this.getAppsScriptsTriggers().find((e=>e.getHandlerFunction()===t));e&&this.getGoogleAppsScriptsTriggerObj().deleteTrigger(e)}getGoogleCalendarObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Calendar}getAllCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items}getAllOwnedCalendars(){return this.getGoogleCalendarObj().CalendarList.list({showHidden:!0}).items.filter((t=>"owner"===t.accessRole))}getCalendarByName(t){return this.getAllCalendars().find((e=>e.summary===t))}createCalendar(t){const e=this.getGoogleCalendarObj();if(this.getAllOwnedCalendars().map((t=>t.summary)).includes(t))throw new Error(`calendar ${t} already exists!`);const s=e.newCalendar();s.summary=t,s.timeZone=e.Settings.get("timezone").value;return e.Calendars.insert(s)}deleteCalendar(t){const e=this.getGoogleCalendarObj(),s=this.getCalendarByName(t);s&&(e.Calendars.remove(s.id),this.logger(`deleted calendar ${s.summary}`))}getEventsFromCalendar(t){return this.getGoogleCalendarObj().Events.list(t.id,{maxResults:2500}).items.map((t=>this.parseGoogleEvent(t)))}parseGoogleEvent(t){var e,s,i,r,o;return{id:t.id,summary:t.summary,description:null!==(e=t.description)&&void 0!==e?e:"",htmlLink:t.htmlLink,attendees:null!==(s=t.attendees)&&void 0!==s?s:[],reminders:null!==(i=t.reminders)&&void 0!==i?i:{},visibility:null!==(r=t.visibility)&&void 0!==r?r:"default",start:t.start,end:t.end,created:t.created,updated:t.updated,colorId:t.colorId,extendedProperties:null!==(o=t.extendedProperties)&&void 0!==o?o:{}}}addEventToCalendar(t,e){return this.getGoogleCalendarObj().Events.insert(e,t.id)}updateEventFromCalendar(t,e,s){const i=this.getEventById(t,e.id),r=Object.assign(Object.assign({},i),s);this.getGoogleCalendarObj().Events.update(r,t.id,e.id)}moveEventToOtherCalendar(t,e,s){this.removeCalendarEvent(t,e);return this.addEventToCalendar(s,e)}removeCalendarEvent(t,e){this.getGoogleCalendarObj().Events.remove(t.id,e.id)}getEventById(t,e){return this.getGoogleCalendarObj().Events.get(t.id,e)}getGoogleUtilities(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Utilities}getGoogleEmailObj(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return MailApp}sendEmail(t){this.getGoogleEmailObj().sendEmail(t)}installGcalSync(){this.removeAppsScriptsTrigger(this.config.settings.syncFunction),this.addAppsScriptsTrigger(this.config.settings.syncFunction,this.config.settings.updateFrequency),this.createMissingAppsScriptsProperties(),this.logger(`${this.APPNAME} was set to run function "${this.config.settings.syncFunction}" every ${this.config.settings.updateFrequency} minutes`)}uninstallGcalSync(){this.removeAppsScriptsTrigger(this.config.settings.syncFunction),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted),this.removeAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastDailyEmailSentDate),this.logger(`${this.APPNAME} automation was removed from appscript!`)}createMissingAppsScriptsProperties(){Object.keys(this.APPS_SCRIPTS_PROPERTIES).forEach((t=>{this.getAppsScriptsProperties().includes(t)||(this.logger(`created missing apps script property: ${t}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES[t],""))}))}cleanTodayEventsStats(){this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits,""),this.logger(`${this.TODAY_DATE} stats were reseted!`)}showTodayEventsStats(){const t=t=>t.split("\n").filter((t=>t.length>0)).map((t=>`- ${t}`)).join("\n"),e=this.getTodayEvents();this.logger(`stats for ${this.TODAY_DATE}`),this.logger(`ticktick sync - added tasks    : ${this.stringToArray(e.addedTicktickTasks).length}${this.stringToArray(e.addedTicktickTasks).length>0?`\n\n${t(e.addedTicktickTasks)}`:""}`),this.logger(`ticktick sync - updated tasks  : ${this.stringToArray(e.updatedTicktickTasks).length}${this.stringToArray(e.updatedTicktickTasks).length>0?`\n\n${t(e.updatedTicktickTasks)}`:""}`),this.logger(`ticktick sync - completed tasks: ${this.stringToArray(e.completedTicktickTasks).length}${this.stringToArray(e.completedTicktickTasks).length>0?`\n\n${t(e.completedTicktickTasks)}`:""}`),this.logger(`github sync   - added commmits : ${this.stringToArray(e.addedGithubCommits).length}${this.stringToArray(e.addedGithubCommits).length>0?`\n\n${t(e.addedGithubCommits)}`:""}`),this.logger(`github sync   - deleted commits: ${this.stringToArray(e.deletedGithubCommits).length}${this.stringToArray(e.deletedGithubCommits).length>0?`\n\n${t(e.deletedGithubCommits)}`:""}`)}getTodayEvents(){return{addedGithubCommits:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),addedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),completedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),deletedGithubCommits:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),updatedTicktickTasks:this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks)}}formatSessionStats(t){const e=t=>t.split("\n").filter((t=>t.length>0)).length;return{addedTicktickTasks:e(t.addedTicktickTasks),updatedTicktickTasks:e(t.updatedTicktickTasks),completedTicktickTasks:e(t.completedTicktickTasks),addedGithubCommits:e(t.addedGithubCommits),deletedGithubCommits:e(t.deletedGithubCommits)}}sync(){if(this.createMissingAppsScriptsProperties(),this.config.options.syncTicktick){const t=[...new Set([...this.config.ticktickSync.icsCalendars.map((t=>t[1])),...this.config.ticktickSync.icsCalendars.map((t=>t[2]))])];this.createMissingGoogleCalendars(t)}if(this.config.options.syncGithub&&this.createMissingGoogleCalendars([this.config.githubSync.googleCalendar]),this.config.options.maintanceMode)return void this.logger("sync skiped due to maintance mode");const t=this.syncTicktick(),e=t.addedEvents.length,s=t.updatedEvents.length,i=t.completedEvents.length;this.config.options.syncTicktick&&(this.logger(`ticktick sync - added tasks    : ${e}`),this.logger(`ticktick sync - updated tasks  : ${s}`),this.logger(`ticktick sync - completed tasks: ${i}`));const r=this.syncGihub(),o=r.addedCommits.length,n=r.deletedCommits.length;this.config.options.syncGithub&&(this.logger(`github sync   - added commits  : ${o}`),this.logger(`github sync   - deleted commits: ${n}`));const a={addedTicktickTasks:"",updatedTicktickTasks:"",completedTicktickTasks:"",addedGithubCommits:"",deletedGithubCommits:""};if(e+s+i>0){const e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks),s=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks),i=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks),r=t=>[t.start.date?t.start.date:t.start.dateTime.split("T")[0],t.extendedProperties.private.calendar,t.summary,t.htmlLink].join(this.EVENTS_DIVIDER);a.addedTicktickTasks=t.addedEvents.map((t=>r(t))).join("\n"),a.updatedTicktickTasks=t.updatedEvents.map((t=>r(t))).join("\n"),a.completedTicktickTasks=t.completedEvents.map((t=>r(t))).join("\n"),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickAddedTasks,`${e?e+"\n":""}${a.addedTicktickTasks}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickUpdateTasks,`${s?s+"\n":""}${a.updatedTicktickTasks}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayTicktickCompletedTasks,`${i?i+"\n":""}${a.completedTicktickTasks}`)}if(o+n>0){const t=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits),e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits),s=t=>{const e=t.extendedProperties.private;return[e.commitDate.split("T")[0],e.repository.replace(`${this.config.githubSync.username}/`,""),this.config.githubSync.parseGithubEmojis?this.parseGithubEmojisString(e.commitMessage):e.commitMessage,t.htmlLink].join(this.EVENTS_DIVIDER)};a.addedGithubCommits=r.addedCommits.map((t=>s(t))).join("\n"),a.deletedGithubCommits=r.deletedCommits.map((t=>s(t))).join("\n"),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubAddedCommits,`${t?t+"\n":""}${a.addedGithubCommits}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.todayGithubDeletedCommits,`${e?e+"\n":""}${a.deletedGithubCommits}`)}return this.sendAfterSyncEmails(a),this.formatSessionStats(a)}createMissingGoogleCalendars(t){let e=!1;t.forEach((t=>{this.getCalendarByName(t)||(this.createCalendar(t),this.logger(`created google calendar: [${t}]`),e=!0)})),e&&this.getGoogleUtilities().sleep(2e3)}getTasksFromGoogleCalendars(t){return t.reduce(((t,e)=>{const s=e,i=this.getCalendarByName(s);return[...t,...this.getEventsFromCalendar(i)]}),[])}syncGihub(){const t={addedCommits:[],deletedCommits:[]};if(!this.config.options.syncGithub)return t;const e=()=>{this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubCommitChangesCount,"1"),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastAddedCommits,""),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastDeletedCommits,"")};""===this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubCommitChangesCount)&&e(),Number(this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubCommitChangesCount))>this.GITHUB_REQUIRED_VALIDATIONS&&e();const s=Number(this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubCommitChangesCount));s>1&&this.logger(`checking commit changes: ${s}/${this.GITHUB_REQUIRED_VALIDATIONS}`),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubCommitChangesCount,(Number(s)+1).toString()),this.createMissingGoogleCalendars([this.config.githubSync.googleCalendar]);const i=this.getCalendarByName(this.config.githubSync.googleCalendar),r=this.getTasksFromGoogleCalendars([this.config.githubSync.googleCalendar]),o=this.getAllGithubCommits().map((t=>({commitDate:t.commit.author.date,commitMessage:t.commit.message.split("\n")[0],commitId:t.html_url.split("commit/")[1],commitUrl:t.html_url,repository:t.repository.full_name,repositoryId:t.repository.id,repositoryName:t.repository.name,repositoryOwner:t.repository.owner.login,repositoryDescription:t.repository.description,isRepositoryPrivate:t.repository.private,isRepositoryFork:t.repository.fork}))).filter((t=>t.repository.search(this.config.githubSync.username)>-1)).filter((t=>!1===this.config.githubSync.ignoredRepos.includes(t.repositoryName))),n=[];o.forEach((t=>{var e;if(!r.filter((e=>e.extendedProperties.private.repository===t.repository)).filter((e=>e.extendedProperties.private.commitDate===t.commitDate)).find((e=>this.parseGithubEmojisString(e.extendedProperties.private.commitMessage)===this.parseGithubEmojisString(t.commitMessage)))){const s=this.config.githubSync.parseGithubEmojis?this.parseGithubEmojisString(t.commitMessage):t.commitMessage,i={commitDate:t.commitDate,commitMessage:s,commitId:t.commitId,commitUrl:t.commitUrl,repository:t.repository,repositoryId:t.repositoryId,repositoryName:t.repositoryName,repositoryOwner:t.repositoryOwner,repositoryDescription:null!==(e=t.repositoryDescription)&&void 0!==e?e:""},r={summary:`${t.repositoryName} - ${s}`,description:`repository: https://github.com/${t.repository}\ncommit: ${t.commitUrl}`,start:{dateTime:t.commitDate},end:{dateTime:t.commitDate},reminders:{useDefault:!1,overrides:[]},extendedProperties:{private:i}};n.push(r),this.logger(`detect a new commit to be added: ${t.repositoryName} - ${s}`)}}));const a=n.map((t=>`${t.summary} - ${t.start.dateTime}`)).join("\n");if(1===s)this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastAddedCommits,a);else{if(a!==this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastAddedCommits))return this.logger("reset github commit properties due differences in added commits"),e(),t}s===this.GITHUB_REQUIRED_VALIDATIONS&&n.forEach((s=>{try{const e=this.addEventToCalendar(i,s);t.addedCommits.push(e),this.logger(`add new commit to gcal: ${e.extendedProperties.private.repositoryName} - ${e.extendedProperties.private.commitMessage}`)}catch(t){throw e(),new Error(t.message)}}));const d=[];this.getEventsFromCalendar(i).forEach((t=>{const e=t.extendedProperties.private;o.filter((t=>t.repository===e.repository)).filter((t=>t.commitDate===e.commitDate)).find((t=>this.parseGithubEmojisString(t.commitMessage)===this.parseGithubEmojisString(e.commitMessage)))||(d.push(t),this.logger(`detect a commit to be deleted in gcal: ${t.extendedProperties.private.repositoryName} - ${t.extendedProperties.private.commitMessage}`))}));const c=d.map((t=>`${t.summary} - ${t.start.dateTime}`)).join("\n");if(1===s)this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastDeletedCommits,c);else{if(c!==this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.githubLastDeletedCommits))return this.logger("reset github commit properties due differences in deleted commits"),e(),t}return s===this.GITHUB_REQUIRED_VALIDATIONS&&d.forEach((e=>{const s=this.getEventById(i,e.id);this.removeCalendarEvent(i,e),t.deletedCommits.push(s),this.logger(`deleted new commit to gcal: ${s.extendedProperties.private.repositoryName} - ${s.extendedProperties.private.commitMessage}`)})),s===this.GITHUB_REQUIRED_VALIDATIONS&&(this.logger("reset github commit properties since the changes were made"),e()),n.length+d.length===0&&(this.logger("reset github commit properties since there are no changes to track"),e()),t}getAllGithubCommits(){var t;const e=[];let s=1,i=!1;for(;!1===i;){const r=`https://api.github.com/search/commits?q=author:${this.config.githubSync.username}&page=${s}&sort=committer-date&per_page=100`;let o;o=""!==this.config.githubSync.personalToken?this.getGoogleFetch().fetch(r,{muteHttpExceptions:!0,headers:{Authorization:`Bearer ${this.config.githubSync.personalToken}`}}):this.getGoogleFetch().fetch(r,{muteHttpExceptions:!0});const n=null!==(t=JSON.parse(o.getContentText()))&&void 0!==t?t:{};if(200!==o.getResponseCode()){if("Validation Failed"===n.message)throw new Error(this.ERRORS.invalidGithubUsername);if("Bad credentials"===n.message)throw new Error(this.ERRORS.invalidGithubToken);throw new Error(n.message)}const a=n.items;if(0===a.length){i=!0;break}if(e.push(...a),s++,s>10){i=!0;break}}return e}parseGithubEmojisString(t){const e={":art:":"🎨",":zap:":"⚡️",":fire:":"🔥",":bug:":"🐛",":ambulance:":"🚑️",":sparkles:":"✨",":memo:":"📝",":rocket:":"🚀",":lipstick:":"💄",":tada:":"🎉",":white_check_mark:":"✅",":lock:":"🔒️",":closed_lock_with_key:":"🔐",":bookmark:":"🔖",":rotating_light:":"🚨",":construction:":"🚧",":green_heart:":"💚",":arrow_down:":"⬇️",":arrow_up:":"⬆️",":pushpin:":"📌",":construction_worker:":"👷",":chart_with_upwards_trend:":"📈",":recycle:":"♻️",":heavy_plus_sign:":"➕",":heavy_minus_sign:":"➖",":wrench:":"🔧",":hammer:":"🔨",":globe_with_meridians:":"🌐",":pencil2:":"✏️",":poop:":"💩",":rewind:":"⏪️",":twisted_rightwards_arrows:":"🔀",":package:":"📦️",":alien:":"👽️",":truck:":"🚚",":page_facing_up:":"📄",":boom:":"💥",":bento:":"🍱",":wheelchair:":"♿️",":bulb:":"💡",":beers:":"🍻",":speech_balloon:":"💬",":card_file_box:":"🗃️",":loud_sound:":"🔊",":mute:":"🔇",":busts_in_silhouette:":"👥",":children_crossing:":"🚸",":building_construction:":"🏗️",":iphone:":"📱",":clown_face:":"🤡",":egg:":"🥚",":see_no_evil:":"🙈",":camera_flash:":"📸",":alembic:":"⚗️",":mag:":"🔍️",":label:":"🏷️",":seedling:":"🌱",":triangular_flag_on_post:":"🚩",":goal_net:":"🥅",":dizzy:":"💫",":wastebasket:":"🗑️",":passport_control:":"🛂",":adhesive_bandage:":"🩹",":monocle_face:":"🧐",":coffin:":"⚰️",":test_tube:":"🧪",":necktie:":"👔",":stethoscope:":"🩺",":bricks:":"🧱",":technologist:":"🧑‍💻",":money_with_wings:":"💸",":thread:":"🧵",":safety_vest:":"🦺"};let s=t;for(const[t,i]of Object.entries(e))s=s.replace(t,i);return s}syncTicktick(){const t={addedEvents:[],updatedEvents:[],completedEvents:[]};if(!this.config.options.syncTicktick)return t;const e=[...new Set([...this.config.ticktickSync.icsCalendars.map((t=>t[1])),...this.config.ticktickSync.icsCalendars.map((t=>t[2]))])];this.createMissingGoogleCalendars(e);const s=this.getTasksFromGoogleCalendars(this.config.ticktickSync.icsCalendars.map((t=>t[1]))),i=this.config.ticktickSync.icsCalendars.filter((t=>{var e;return"string"==typeof(null===(e=t[3])||void 0===e?void 0:e.tag)})).map((t=>this.checkCalendarItem(t,s))),r=this.parseResults(i),o=this.config.ticktickSync.icsCalendars.filter((t=>!t[3]||t[3]&&!t[3].tag)).map((t=>this.checkCalendarItem(t,s,i))),n=this.parseResults(o),a=[...r.taggedIcsTasks,...n.taggedIcsTasks];return t.completedEvents=this.checkCalendarCompletedTasks(s,a),t.addedEvents=[...r.added,...n.added],t.updatedEvents=[...r.updated,...n.updated],t}checkCalendarItem(t,e,s){var i;const[r,o,n,a]=t;let d=this.getEventsFromIcsCalendar(r);(null==a?void 0:a.ignoredTags)&&s&&(null===(i=null==a?void 0:a.ignoredTags)||void 0===i||i.forEach((t=>{const e=s.find((e=>e.calendarOptions.tag===t));if(e){const t=e.tasksFromIcs.map((t=>t.id));d=d.filter((e=>!1===t.includes(e.id)))}})));const[c,h]=this.checkTicktickAddedAndUpdatedTasks(t,d,e);return{icsCal:r,gCalCorresponding:o,completedCal:n,calendarOptions:null!=a?a:{},tasksFromIcs:d,addedTasks:c,updatedTasks:h}}checkTicktickAddedAndUpdatedTasks(t,e,s){const[i,r,o,n]=t,a=[],d=[],c=this.getCalendarByName(r),h=t=>`task: https://ticktick.com/webapp/#q/all/tasks/${t.id.split("@")[0]}${t.description?"\n\n"+t.description.replace(/\\n/g,"\n"):""}`,l=t=>{let e=t;return e=e.replace(/\\,/g,","),e=e.replace(/\\;/g,";"),e=e.replace(/\\"/g,'"'),e=e.replace(/\\\\/g,"\\"),e};return e.forEach(((t,e)=>{const i=s.find((e=>e.extendedProperties.private.tickTaskId===t.id));if(i){const e=s.find((e=>e.extendedProperties.private.tickTaskId===t.id)),a=l(t.name)!==e.summary,p=Object.keys(t.start).length!==Object.keys(e.start).length,g=t.start.date!==e.start.date||t.start.dateTime!==e.start.dateTime,m=t.end.date!==e.end.date||t.end.dateTime!==e.end.dateTime,u=r!==i.extendedProperties.private.calendar;let S=!1;S=void 0===(null==n?void 0:n.color)?void 0!==e.colorId:n.color.toString()!==e.colorId;const T={tickTaskId:t.id,calendar:r,completedCalendar:o},P={summary:t.name,description:h(t),start:t.start,end:t.end,extendedProperties:{private:T},colorId:(null==n?void 0:n.color)?null==n?void 0:n.color.toString():void 0};if(u){const t=Object.assign(Object.assign({},e),P),s=this.getCalendarByName(i.extendedProperties.private.calendar);this.moveEventToOtherCalendar(s,t,this.getCalendarByName(r)),d.push(t),this.logger(`ticktick task was moved to other calendar: ${P.summary}`)}else if(a||p||g||m||S){this.updateEventFromCalendar(c,e,P);const t=Object.assign(Object.assign({},e),P);d.push(t),this.logger(`ticktick task was updated: ${P.summary}`)}}else{const e={tickTaskId:t.id,calendar:r,completedCalendar:o},s=(null==n?void 0:n.color)?{colorId:n.color.toString()}:{},i=Object.assign({summary:l(t.name),description:h(t),start:t.start,end:t.end,reminders:{useDefault:!0},extendedProperties:{private:e}},s);try{const t=this.addEventToCalendar(c,i);a.push(t)}catch(t){throw t.message.search("API call to calendar.events.insert failed with error: Required")>-1?new Error(this.ERRORS.abusiveGoogleCalendarApiUse):new Error(t.message)}this.logger(`ticktick task was added to gcal: ${i.summary}`)}})),[a,d]}checkCalendarCompletedTasks(t,e){const s=[];return t.filter((t=>t.extendedProperties.private.tickTaskId)).forEach((t=>{if(!e.map((t=>t.id)).includes(t.extendedProperties.private.tickTaskId)){const e=this.getCalendarByName(t.extendedProperties.private.calendar),i=this.getCalendarByName(t.extendedProperties.private.completedCalendar),r=this.moveEventToOtherCalendar(e,t,i);this.getGoogleUtilities().sleep(2e3),s.push(r),this.logger(`ticktick task was completed: ${t.summary}`)}})),s}parseResults(t){if(0===t.length)return{added:[],taggedIcsTasks:[],updated:[]};return t.reduce(((t,e)=>(t.added||(t.added=[],t.updated=[],t.taggedIcsTasks=[]),t.added.push(...e.addedTasks),t.updated.push(...e.updatedTasks),t.taggedIcsTasks.push(...e.tasksFromIcs),t)),{})}sendAfterSyncEmails(t){var e;this.config.options.emailSession&&this.sendSessionEmail(t);const s=this.TODAY_DATE===this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastDailyEmailSentDate);if(this.isCurrentTimeAfter(this.config.datetime.dailyEmailsTime)&&!s&&(this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastDailyEmailSentDate,this.TODAY_DATE),this.config.options.emailDailySummary&&(this.sendDailySummaryEmail(this.getTodayEvents()),this.cleanTodayEventsStats()),this.config.options.emailNewRelease)){const t=this.getLatestGcalSyncRelease(),s=this.parseGcalVersion(t.tag_name),i=this.parseGcalVersion(this.VERSION),r=null!==(e=this.getAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted))&&void 0!==e?e:"";s>i&&s.toString()!=r&&(this.sendNewReleaseEmail(t),this.updateAppsScriptsProperty(this.APPS_SCRIPTS_PROPERTIES.lastReleasedVersionAlerted,s.toString()))}}sendNewReleaseEmail(t){const e=`Hi!\n      <br/><br/>\n      a new <a href="https://github.com/${this.GITHUB_REPOSITORY}">${this.APPNAME}</a> version is available: <br/>\n      <ul>\n        <li>new version: ${t.tag_name}</li>\n        <li>published at: ${t.published_at}</li>\n        <li>details: <a href="https://github.com/${this.GITHUB_REPOSITORY}/releases">here</a></li>\n      </ul>\n      to update, replace the old version number in your apps scripts <a href="https://script.google.com/">gcal sync project</a> to the new version: ${t.tag_name.replace("v","")}<br/>\n      and also check if you need to change the setup code in the <a href='https://github.com/${this.GITHUB_REPOSITORY}#installation'>installation section</a>.\n      <br /><br />\n      Regards,\n      your <a href='https://github.com/${this.GITHUB_REPOSITORY}'>${this.APPNAME}</a> bot\n    `,s={to:this.USER_EMAIL,name:`${this.APPNAME}`,subject:`new version [${t.tag_name}] was released - ${this.APPNAME}`,htmlBody:e};this.sendEmail(s),this.logger(`new release email was sent to ${this.USER_EMAIL}`)}sendSessionEmail(t){const e=this.generateReportEmailContent(t);if(!e)return;const s={to:this.USER_EMAIL,name:`${this.APPNAME}`,subject:`session report - ${this.getTotalSessionEvents(t)} modifications - ${this.APPNAME}`,htmlBody:e};this.sendEmail(s),this.logger(`session email was sent to ${this.USER_EMAIL}`)}sendDailySummaryEmail(t){const e=this.generateReportEmailContent(t);if(!e)return;const s={to:this.USER_EMAIL,name:`${this.APPNAME}`,subject:`daily report for ${this.TODAY_DATE} - ${this.getTotalSessionEvents(t)} modifications - ${this.APPNAME}`,htmlBody:e};this.sendEmail(s),this.logger(`summary email was sent to ${this.USER_EMAIL}`)}sendErrorEmail(t){if(!this.config.options.emailErrors||!t)return;this.logger("an error occurred: "),this.logger(t);const e=`Hi!\n    <br/><br/>\n    an error recently occurred: <br/><br/>\n    <b>${t}</b>\n    <br /><br />\n    Regards,\n    your <a href='https://github.com/${this.GITHUB_REPOSITORY}'>${this.APPNAME}</a> bot\n  `,s={to:this.USER_EMAIL,name:`${this.APPNAME}`,subject:`an error occurred - ${this.APPNAME}`,htmlBody:e};this.sendEmail(s),this.logger(`error email was sent to ${this.USER_EMAIL}`)}parseGcalVersion(t){return Number(t.replace("v","").split(".").join(""))}getLatestGcalSyncRelease(){var t;const e=this.getGoogleFetch().fetch(`https://api.github.com/repos/${this.GITHUB_REPOSITORY}/releases?per_page=1`),s=null!==(t=JSON.parse(e.getContentText())[0])&&void 0!==t?t:{};if(0!==Object.keys(s).length)return s}generateReportEmailContent(t){const e=this.stringToArray(t.addedTicktickTasks),s=this.stringToArray(t.updatedTicktickTasks),i=this.stringToArray(t.completedTicktickTasks),r=this.stringToArray(t.addedGithubCommits),o=this.stringToArray(t.deletedGithubCommits),n=this.getTotalSessionEvents(t);if(0===n)return;const a='style="border: 1px solid #333; width: 90%"',d='style="width: 100%"',c='style="border: 1px solid #333"',h=t=>{if(!t||0===t.length)return"";return`${t.map((t=>t.split(this.EVENTS_DIVIDER))).sort(((t,e)=>Number(new Date(t[0]))-Number(new Date(e[0])))).map((t=>{const[e,s,i,r]=t,o=[e,s,`<a href="${r}">${i}</a>`].map((t=>`<td ${c}>&nbsp;&nbsp;${t}</td>`)).join("\n");return`<tr ${d}">\n${o}\n</tr>`})).join("\n")}`},l=`<tr ${d}">\n<th ${c} width="80px">date</th><th ${c} width="130px">calendar</th><th ${c} width="auto">task</th>\n</tr>`,p=`<tr ${d}">\n<th ${c} width="80px">date</th><th ${c} width="130px">repository</th><th ${c} width="auto">commit</th>\n</tr>`;let g="";return g=`Hi!<br/><br/>there were ${n} changes made to your google calendar:<br/>\n`,g+=e.length>0?`<br/>added ticktick events    : ${e.length}<br/><br/> \n <center>\n<table ${a}>\n${l}\n${h(e)}\n</table>\n</center>\n`:"",g+=s.length>0?`<br/>updated ticktick events  : ${s.length}<br/><br/> \n <center>\n<table ${a}>\n${l}\n${h(s)}\n</table>\n</center>\n`:"",g+=i.length>0?`<br/>completed ticktick events: ${i.length}<br/><br/> \n <center>\n<table ${a}>\n${l}\n${h(i)}\n</table>\n</center>\n`:"",g+=r.length>0?`<br/>added commits events     : ${r.length}<br/><br/> \n <center>\n<table ${a}>\n${p}\n${h(r)}\n</table>\n</center>\n`:"",g+=o.length>0?`<br/>removed commits events   : ${o.length}<br/><br/> \n <center>\n<table ${a}>\n${p}\n${h(o)}\n</table>\n</center>\n`:"",g+=`<br/>Regards,<br/>your <a href='https://github.com/${this.GITHUB_REPOSITORY}'>${this.APPNAME}</a> bot`,g}getTotalSessionEvents(t){return this.stringToArray(t.addedTicktickTasks).length+this.stringToArray(t.updatedTicktickTasks).length+this.stringToArray(t.completedTicktickTasks).length+this.stringToArray(t.addedGithubCommits).length+this.stringToArray(t.deletedGithubCommits).length}stringToArray(t){return t.split("\n").filter((t=>t.length>0))}}}));